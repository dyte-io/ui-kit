'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type ChatGroupChangedType, type DyteAiCustomEvent, type DyteAiToggleCustomEvent, type DyteBreakoutRoomsManagerCustomEvent, type DyteBreakoutRoomsToggleCustomEvent, type DyteBroadcastMessageModalCustomEvent, type DyteCameraToggleCustomEvent, type DyteCaptionToggleCustomEvent, type DyteChannelCreatorCustomEvent, type DyteChannelSelectorViewCustomEvent, type DyteChatComposerUiCustomEvent, type DyteChatComposerViewCustomEvent, type DyteChatCustomEvent, type DyteChatMessageCustomEvent, type DyteChatMessagesUiCustomEvent, type DyteChatMessagesUiPaginatedCustomEvent, type DyteChatSelectorUiCustomEvent, type DyteChatToggleCustomEvent, type DyteConfirmationModalCustomEvent, type DyteDebuggerCustomEvent, type DyteDebuggerToggleCustomEvent, type DyteDialogManagerCustomEvent, type DyteFileDropzoneCustomEvent, type DyteFilePickerButtonCustomEvent, type DyteFullscreenToggleCustomEvent, type DyteGridCustomEvent, type DyteImageMessageCustomEvent, type DyteJoinStageCustomEvent, type DyteLeaveButtonCustomEvent, type DyteLeaveMeetingCustomEvent, type DyteLivestreamToggleCustomEvent, type DyteMeetingCustomEvent, type DyteMicToggleCustomEvent, type DyteMoreToggleCustomEvent, type DyteMuteAllButtonCustomEvent, type DyteMuteAllConfirmationCustomEvent, type DyteNewMessageEvent, type DyteOverlayModalCustomEvent, type DyteParticipantTileCustomEvent, type DyteParticipantsCustomEvent, type DyteParticipantsToggleCustomEvent, type DytePermissionsMessageCustomEvent, type DytePipToggleCustomEvent, type DytePluginsCustomEvent, type DytePluginsToggleCustomEvent, type DytePollFormCustomEvent, type DytePollsToggleCustomEvent, type DyteScreenShareToggleCustomEvent, type DyteScreenshareViewCustomEvent, type DyteSettingsAudioCustomEvent, type DyteSettingsCustomEvent, type DyteSettingsToggleCustomEvent, type DyteSettingsVideoCustomEvent, type DyteSetupScreenCustomEvent, type DyteSidebarCustomEvent, type DyteStageCustomEvent, type DyteStageToggleCustomEvent, type DyteTabBarCustomEvent, type DyteTextFieldCustomEvent, type IconPack, type Message, type NewMessageEvent, type Peer, type PollObject, type States, type Tab, type TextMessage } from "@dytesdk/ui-kit";
import { DyteAiChat as DyteAiChatElement, defineCustomElement as defineDyteAiChat } from "@dytesdk/ui-kit/dist/components/dyte-ai-chat.js";
import { DyteAiHome as DyteAiHomeElement, defineCustomElement as defineDyteAiHome } from "@dytesdk/ui-kit/dist/components/dyte-ai-home.js";
import { DyteAiToggle as DyteAiToggleElement, defineCustomElement as defineDyteAiToggle } from "@dytesdk/ui-kit/dist/components/dyte-ai-toggle.js";
import { DyteAiTranscriptions as DyteAiTranscriptionsElement, defineCustomElement as defineDyteAiTranscriptions } from "@dytesdk/ui-kit/dist/components/dyte-ai-transcriptions.js";
import { DyteAi as DyteAiElement, defineCustomElement as defineDyteAi } from "@dytesdk/ui-kit/dist/components/dyte-ai.js";
import { DyteAudioGrid as DyteAudioGridElement, defineCustomElement as defineDyteAudioGrid } from "@dytesdk/ui-kit/dist/components/dyte-audio-grid.js";
import { DyteAudioTile as DyteAudioTileElement, defineCustomElement as defineDyteAudioTile } from "@dytesdk/ui-kit/dist/components/dyte-audio-tile.js";
import { DyteAudioVisualizer as DyteAudioVisualizerElement, defineCustomElement as defineDyteAudioVisualizer } from "@dytesdk/ui-kit/dist/components/dyte-audio-visualizer.js";
import { DyteAvatar as DyteAvatarElement, defineCustomElement as defineDyteAvatar } from "@dytesdk/ui-kit/dist/components/dyte-avatar.js";
import { DyteBreakoutRoomManager as DyteBreakoutRoomManagerElement, defineCustomElement as defineDyteBreakoutRoomManager } from "@dytesdk/ui-kit/dist/components/dyte-breakout-room-manager.js";
import { DyteBreakoutRoomParticipants as DyteBreakoutRoomParticipantsElement, defineCustomElement as defineDyteBreakoutRoomParticipants } from "@dytesdk/ui-kit/dist/components/dyte-breakout-room-participants.js";
import { DyteBreakoutRoomsManager as DyteBreakoutRoomsManagerElement, defineCustomElement as defineDyteBreakoutRoomsManager } from "@dytesdk/ui-kit/dist/components/dyte-breakout-rooms-manager.js";
import { DyteBreakoutRoomsToggle as DyteBreakoutRoomsToggleElement, defineCustomElement as defineDyteBreakoutRoomsToggle } from "@dytesdk/ui-kit/dist/components/dyte-breakout-rooms-toggle.js";
import { DyteBroadcastMessageModal as DyteBroadcastMessageModalElement, defineCustomElement as defineDyteBroadcastMessageModal } from "@dytesdk/ui-kit/dist/components/dyte-broadcast-message-modal.js";
import { DyteButton as DyteButtonElement, defineCustomElement as defineDyteButton } from "@dytesdk/ui-kit/dist/components/dyte-button.js";
import { DyteCameraSelector as DyteCameraSelectorElement, defineCustomElement as defineDyteCameraSelector } from "@dytesdk/ui-kit/dist/components/dyte-camera-selector.js";
import { DyteCameraToggle as DyteCameraToggleElement, defineCustomElement as defineDyteCameraToggle } from "@dytesdk/ui-kit/dist/components/dyte-camera-toggle.js";
import { DyteCaptionToggle as DyteCaptionToggleElement, defineCustomElement as defineDyteCaptionToggle } from "@dytesdk/ui-kit/dist/components/dyte-caption-toggle.js";
import { DyteChannelCreator as DyteChannelCreatorElement, defineCustomElement as defineDyteChannelCreator } from "@dytesdk/ui-kit/dist/components/dyte-channel-creator.js";
import { DyteChannelDetails as DyteChannelDetailsElement, defineCustomElement as defineDyteChannelDetails } from "@dytesdk/ui-kit/dist/components/dyte-channel-details.js";
import { DyteChannelHeader as DyteChannelHeaderElement, defineCustomElement as defineDyteChannelHeader } from "@dytesdk/ui-kit/dist/components/dyte-channel-header.js";
import { DyteChannelSelectorUi as DyteChannelSelectorUiElement, defineCustomElement as defineDyteChannelSelectorUi } from "@dytesdk/ui-kit/dist/components/dyte-channel-selector-ui.js";
import { DyteChannelSelectorView as DyteChannelSelectorViewElement, defineCustomElement as defineDyteChannelSelectorView } from "@dytesdk/ui-kit/dist/components/dyte-channel-selector-view.js";
import { DyteChatComposerUi as DyteChatComposerUiElement, defineCustomElement as defineDyteChatComposerUi } from "@dytesdk/ui-kit/dist/components/dyte-chat-composer-ui.js";
import { DyteChatComposerView as DyteChatComposerViewElement, defineCustomElement as defineDyteChatComposerView } from "@dytesdk/ui-kit/dist/components/dyte-chat-composer-view.js";
import { DyteChatMessage as DyteChatMessageElement, defineCustomElement as defineDyteChatMessage } from "@dytesdk/ui-kit/dist/components/dyte-chat-message.js";
import { DyteChatMessagesUiPaginated as DyteChatMessagesUiPaginatedElement, defineCustomElement as defineDyteChatMessagesUiPaginated } from "@dytesdk/ui-kit/dist/components/dyte-chat-messages-ui-paginated.js";
import { DyteChatMessagesUi as DyteChatMessagesUiElement, defineCustomElement as defineDyteChatMessagesUi } from "@dytesdk/ui-kit/dist/components/dyte-chat-messages-ui.js";
import { DyteChatSearchResults as DyteChatSearchResultsElement, defineCustomElement as defineDyteChatSearchResults } from "@dytesdk/ui-kit/dist/components/dyte-chat-search-results.js";
import { DyteChatSelectorUi as DyteChatSelectorUiElement, defineCustomElement as defineDyteChatSelectorUi } from "@dytesdk/ui-kit/dist/components/dyte-chat-selector-ui.js";
import { DyteChatToggle as DyteChatToggleElement, defineCustomElement as defineDyteChatToggle } from "@dytesdk/ui-kit/dist/components/dyte-chat-toggle.js";
import { DyteChat as DyteChatElement, defineCustomElement as defineDyteChat } from "@dytesdk/ui-kit/dist/components/dyte-chat.js";
import { DyteClock as DyteClockElement, defineCustomElement as defineDyteClock } from "@dytesdk/ui-kit/dist/components/dyte-clock.js";
import { DyteConfirmationModal as DyteConfirmationModalElement, defineCustomElement as defineDyteConfirmationModal } from "@dytesdk/ui-kit/dist/components/dyte-confirmation-modal.js";
import { DyteControlbarButton as DyteControlbarButtonElement, defineCustomElement as defineDyteControlbarButton } from "@dytesdk/ui-kit/dist/components/dyte-controlbar-button.js";
import { DyteControlbar as DyteControlbarElement, defineCustomElement as defineDyteControlbar } from "@dytesdk/ui-kit/dist/components/dyte-controlbar.js";
import { DyteCounter as DyteCounterElement, defineCustomElement as defineDyteCounter } from "@dytesdk/ui-kit/dist/components/dyte-counter.js";
import { DyteDebuggerAudio as DyteDebuggerAudioElement, defineCustomElement as defineDyteDebuggerAudio } from "@dytesdk/ui-kit/dist/components/dyte-debugger-audio.js";
import { DyteDebuggerScreenshare as DyteDebuggerScreenshareElement, defineCustomElement as defineDyteDebuggerScreenshare } from "@dytesdk/ui-kit/dist/components/dyte-debugger-screenshare.js";
import { DyteDebuggerSystem as DyteDebuggerSystemElement, defineCustomElement as defineDyteDebuggerSystem } from "@dytesdk/ui-kit/dist/components/dyte-debugger-system.js";
import { DyteDebuggerToggle as DyteDebuggerToggleElement, defineCustomElement as defineDyteDebuggerToggle } from "@dytesdk/ui-kit/dist/components/dyte-debugger-toggle.js";
import { DyteDebuggerVideo as DyteDebuggerVideoElement, defineCustomElement as defineDyteDebuggerVideo } from "@dytesdk/ui-kit/dist/components/dyte-debugger-video.js";
import { DyteDebugger as DyteDebuggerElement, defineCustomElement as defineDyteDebugger } from "@dytesdk/ui-kit/dist/components/dyte-debugger.js";
import { DyteDialogManager as DyteDialogManagerElement, defineCustomElement as defineDyteDialogManager } from "@dytesdk/ui-kit/dist/components/dyte-dialog-manager.js";
import { DyteDialog as DyteDialogElement, defineCustomElement as defineDyteDialog } from "@dytesdk/ui-kit/dist/components/dyte-dialog.js";
import { DyteDraftAttachmentView as DyteDraftAttachmentViewElement, defineCustomElement as defineDyteDraftAttachmentView } from "@dytesdk/ui-kit/dist/components/dyte-draft-attachment-view.js";
import { DyteEmojiPickerButton as DyteEmojiPickerButtonElement, defineCustomElement as defineDyteEmojiPickerButton } from "@dytesdk/ui-kit/dist/components/dyte-emoji-picker-button.js";
import { DyteEmojiPicker as DyteEmojiPickerElement, defineCustomElement as defineDyteEmojiPicker } from "@dytesdk/ui-kit/dist/components/dyte-emoji-picker.js";
import { DyteEndedScreen as DyteEndedScreenElement, defineCustomElement as defineDyteEndedScreen } from "@dytesdk/ui-kit/dist/components/dyte-ended-screen.js";
import { DyteFileDropzone as DyteFileDropzoneElement, defineCustomElement as defineDyteFileDropzone } from "@dytesdk/ui-kit/dist/components/dyte-file-dropzone.js";
import { DyteFileMessageView as DyteFileMessageViewElement, defineCustomElement as defineDyteFileMessageView } from "@dytesdk/ui-kit/dist/components/dyte-file-message-view.js";
import { DyteFileMessage as DyteFileMessageElement, defineCustomElement as defineDyteFileMessage } from "@dytesdk/ui-kit/dist/components/dyte-file-message.js";
import { DyteFilePickerButton as DyteFilePickerButtonElement, defineCustomElement as defineDyteFilePickerButton } from "@dytesdk/ui-kit/dist/components/dyte-file-picker-button.js";
import { DyteFullscreenToggle as DyteFullscreenToggleElement, defineCustomElement as defineDyteFullscreenToggle } from "@dytesdk/ui-kit/dist/components/dyte-fullscreen-toggle.js";
import { DyteGridPagination as DyteGridPaginationElement, defineCustomElement as defineDyteGridPagination } from "@dytesdk/ui-kit/dist/components/dyte-grid-pagination.js";
import { DyteGrid as DyteGridElement, defineCustomElement as defineDyteGrid } from "@dytesdk/ui-kit/dist/components/dyte-grid.js";
import { DyteHeader as DyteHeaderElement, defineCustomElement as defineDyteHeader } from "@dytesdk/ui-kit/dist/components/dyte-header.js";
import { DyteIcon as DyteIconElement, defineCustomElement as defineDyteIcon } from "@dytesdk/ui-kit/dist/components/dyte-icon.js";
import { DyteIdleScreen as DyteIdleScreenElement, defineCustomElement as defineDyteIdleScreen } from "@dytesdk/ui-kit/dist/components/dyte-idle-screen.js";
import { DyteImageMessageView as DyteImageMessageViewElement, defineCustomElement as defineDyteImageMessageView } from "@dytesdk/ui-kit/dist/components/dyte-image-message-view.js";
import { DyteImageMessage as DyteImageMessageElement, defineCustomElement as defineDyteImageMessage } from "@dytesdk/ui-kit/dist/components/dyte-image-message.js";
import { DyteImageViewer as DyteImageViewerElement, defineCustomElement as defineDyteImageViewer } from "@dytesdk/ui-kit/dist/components/dyte-image-viewer.js";
import { DyteInformationTooltip as DyteInformationTooltipElement, defineCustomElement as defineDyteInformationTooltip } from "@dytesdk/ui-kit/dist/components/dyte-information-tooltip.js";
import { DyteJoinStage as DyteJoinStageElement, defineCustomElement as defineDyteJoinStage } from "@dytesdk/ui-kit/dist/components/dyte-join-stage.js";
import { DyteLeaveButton as DyteLeaveButtonElement, defineCustomElement as defineDyteLeaveButton } from "@dytesdk/ui-kit/dist/components/dyte-leave-button.js";
import { DyteLeaveMeeting as DyteLeaveMeetingElement, defineCustomElement as defineDyteLeaveMeeting } from "@dytesdk/ui-kit/dist/components/dyte-leave-meeting.js";
import { DyteLivestreamIndicator as DyteLivestreamIndicatorElement, defineCustomElement as defineDyteLivestreamIndicator } from "@dytesdk/ui-kit/dist/components/dyte-livestream-indicator.js";
import { DyteLivestreamPlayer as DyteLivestreamPlayerElement, defineCustomElement as defineDyteLivestreamPlayer } from "@dytesdk/ui-kit/dist/components/dyte-livestream-player.js";
import { DyteLivestreamToggle as DyteLivestreamToggleElement, defineCustomElement as defineDyteLivestreamToggle } from "@dytesdk/ui-kit/dist/components/dyte-livestream-toggle.js";
import { DyteLogo as DyteLogoElement, defineCustomElement as defineDyteLogo } from "@dytesdk/ui-kit/dist/components/dyte-logo.js";
import { DyteMarkdownView as DyteMarkdownViewElement, defineCustomElement as defineDyteMarkdownView } from "@dytesdk/ui-kit/dist/components/dyte-markdown-view.js";
import { DyteMeetingTitle as DyteMeetingTitleElement, defineCustomElement as defineDyteMeetingTitle } from "@dytesdk/ui-kit/dist/components/dyte-meeting-title.js";
import { DyteMeeting as DyteMeetingElement, defineCustomElement as defineDyteMeeting } from "@dytesdk/ui-kit/dist/components/dyte-meeting.js";
import { DyteMenuItem as DyteMenuItemElement, defineCustomElement as defineDyteMenuItem } from "@dytesdk/ui-kit/dist/components/dyte-menu-item.js";
import { DyteMenuList as DyteMenuListElement, defineCustomElement as defineDyteMenuList } from "@dytesdk/ui-kit/dist/components/dyte-menu-list.js";
import { DyteMenu as DyteMenuElement, defineCustomElement as defineDyteMenu } from "@dytesdk/ui-kit/dist/components/dyte-menu.js";
import { DyteMessageListView as DyteMessageListViewElement, defineCustomElement as defineDyteMessageListView } from "@dytesdk/ui-kit/dist/components/dyte-message-list-view.js";
import { DyteMessageView as DyteMessageViewElement, defineCustomElement as defineDyteMessageView } from "@dytesdk/ui-kit/dist/components/dyte-message-view.js";
import { DyteMicToggle as DyteMicToggleElement, defineCustomElement as defineDyteMicToggle } from "@dytesdk/ui-kit/dist/components/dyte-mic-toggle.js";
import { DyteMicrophoneSelector as DyteMicrophoneSelectorElement, defineCustomElement as defineDyteMicrophoneSelector } from "@dytesdk/ui-kit/dist/components/dyte-microphone-selector.js";
import { DyteMixedGrid as DyteMixedGridElement, defineCustomElement as defineDyteMixedGrid } from "@dytesdk/ui-kit/dist/components/dyte-mixed-grid.js";
import { DyteMoreToggle as DyteMoreToggleElement, defineCustomElement as defineDyteMoreToggle } from "@dytesdk/ui-kit/dist/components/dyte-more-toggle.js";
import { DyteMuteAllButton as DyteMuteAllButtonElement, defineCustomElement as defineDyteMuteAllButton } from "@dytesdk/ui-kit/dist/components/dyte-mute-all-button.js";
import { DyteMuteAllConfirmation as DyteMuteAllConfirmationElement, defineCustomElement as defineDyteMuteAllConfirmation } from "@dytesdk/ui-kit/dist/components/dyte-mute-all-confirmation.js";
import { DyteNameTag as DyteNameTagElement, defineCustomElement as defineDyteNameTag } from "@dytesdk/ui-kit/dist/components/dyte-name-tag.js";
import { DyteNetworkIndicator as DyteNetworkIndicatorElement, defineCustomElement as defineDyteNetworkIndicator } from "@dytesdk/ui-kit/dist/components/dyte-network-indicator.js";
import { DyteNotification as DyteNotificationElement, defineCustomElement as defineDyteNotification } from "@dytesdk/ui-kit/dist/components/dyte-notification.js";
import { DyteNotifications as DyteNotificationsElement, defineCustomElement as defineDyteNotifications } from "@dytesdk/ui-kit/dist/components/dyte-notifications.js";
import { DyteOverlayModal as DyteOverlayModalElement, defineCustomElement as defineDyteOverlayModal } from "@dytesdk/ui-kit/dist/components/dyte-overlay-modal.js";
import { DytePaginatedList as DytePaginatedListElement, defineCustomElement as defineDytePaginatedList } from "@dytesdk/ui-kit/dist/components/dyte-paginated-list.js";
import { DyteParticipantCount as DyteParticipantCountElement, defineCustomElement as defineDyteParticipantCount } from "@dytesdk/ui-kit/dist/components/dyte-participant-count.js";
import { DyteParticipantSetup as DyteParticipantSetupElement, defineCustomElement as defineDyteParticipantSetup } from "@dytesdk/ui-kit/dist/components/dyte-participant-setup.js";
import { DyteParticipantTile as DyteParticipantTileElement, defineCustomElement as defineDyteParticipantTile } from "@dytesdk/ui-kit/dist/components/dyte-participant-tile.js";
import { DyteParticipant as DyteParticipantElement, defineCustomElement as defineDyteParticipant } from "@dytesdk/ui-kit/dist/components/dyte-participant.js";
import { DyteParticipantsAudio as DyteParticipantsAudioElement, defineCustomElement as defineDyteParticipantsAudio } from "@dytesdk/ui-kit/dist/components/dyte-participants-audio.js";
import { DyteParticipantsStageList as DyteParticipantsStageListElement, defineCustomElement as defineDyteParticipantsStageList } from "@dytesdk/ui-kit/dist/components/dyte-participants-stage-list.js";
import { DyteParticipantsStageQueue as DyteParticipantsStageQueueElement, defineCustomElement as defineDyteParticipantsStageQueue } from "@dytesdk/ui-kit/dist/components/dyte-participants-stage-queue.js";
import { DyteParticipantsToggle as DyteParticipantsToggleElement, defineCustomElement as defineDyteParticipantsToggle } from "@dytesdk/ui-kit/dist/components/dyte-participants-toggle.js";
import { DyteParticipantsViewerList as DyteParticipantsViewerListElement, defineCustomElement as defineDyteParticipantsViewerList } from "@dytesdk/ui-kit/dist/components/dyte-participants-viewer-list.js";
import { DyteParticipantsWaitingList as DyteParticipantsWaitingListElement, defineCustomElement as defineDyteParticipantsWaitingList } from "@dytesdk/ui-kit/dist/components/dyte-participants-waiting-list.js";
import { DyteParticipants as DyteParticipantsElement, defineCustomElement as defineDyteParticipants } from "@dytesdk/ui-kit/dist/components/dyte-participants.js";
import { DytePermissionsMessage as DytePermissionsMessageElement, defineCustomElement as defineDytePermissionsMessage } from "@dytesdk/ui-kit/dist/components/dyte-permissions-message.js";
import { DytePipToggle as DytePipToggleElement, defineCustomElement as defineDytePipToggle } from "@dytesdk/ui-kit/dist/components/dyte-pip-toggle.js";
import { DytePluginMain as DytePluginMainElement, defineCustomElement as defineDytePluginMain } from "@dytesdk/ui-kit/dist/components/dyte-plugin-main.js";
import { DytePluginsToggle as DytePluginsToggleElement, defineCustomElement as defineDytePluginsToggle } from "@dytesdk/ui-kit/dist/components/dyte-plugins-toggle.js";
import { DytePlugins as DytePluginsElement, defineCustomElement as defineDytePlugins } from "@dytesdk/ui-kit/dist/components/dyte-plugins.js";
import { DytePollForm as DytePollFormElement, defineCustomElement as defineDytePollForm } from "@dytesdk/ui-kit/dist/components/dyte-poll-form.js";
import { DytePoll as DytePollElement, defineCustomElement as defineDytePoll } from "@dytesdk/ui-kit/dist/components/dyte-poll.js";
import { DytePollsToggle as DytePollsToggleElement, defineCustomElement as defineDytePollsToggle } from "@dytesdk/ui-kit/dist/components/dyte-polls-toggle.js";
import { DytePolls as DytePollsElement, defineCustomElement as defineDytePolls } from "@dytesdk/ui-kit/dist/components/dyte-polls.js";
import { DyteRecordingIndicator as DyteRecordingIndicatorElement, defineCustomElement as defineDyteRecordingIndicator } from "@dytesdk/ui-kit/dist/components/dyte-recording-indicator.js";
import { DyteRecordingToggle as DyteRecordingToggleElement, defineCustomElement as defineDyteRecordingToggle } from "@dytesdk/ui-kit/dist/components/dyte-recording-toggle.js";
import { DyteScreenShareToggle as DyteScreenShareToggleElement, defineCustomElement as defineDyteScreenShareToggle } from "@dytesdk/ui-kit/dist/components/dyte-screen-share-toggle.js";
import { DyteScreenshareView as DyteScreenshareViewElement, defineCustomElement as defineDyteScreenshareView } from "@dytesdk/ui-kit/dist/components/dyte-screenshare-view.js";
import { DyteSettingsAudio as DyteSettingsAudioElement, defineCustomElement as defineDyteSettingsAudio } from "@dytesdk/ui-kit/dist/components/dyte-settings-audio.js";
import { DyteSettingsToggle as DyteSettingsToggleElement, defineCustomElement as defineDyteSettingsToggle } from "@dytesdk/ui-kit/dist/components/dyte-settings-toggle.js";
import { DyteSettingsVideo as DyteSettingsVideoElement, defineCustomElement as defineDyteSettingsVideo } from "@dytesdk/ui-kit/dist/components/dyte-settings-video.js";
import { DyteSettings as DyteSettingsElement, defineCustomElement as defineDyteSettings } from "@dytesdk/ui-kit/dist/components/dyte-settings.js";
import { DyteSetupScreen as DyteSetupScreenElement, defineCustomElement as defineDyteSetupScreen } from "@dytesdk/ui-kit/dist/components/dyte-setup-screen.js";
import { DyteSidebarUi as DyteSidebarUiElement, defineCustomElement as defineDyteSidebarUi } from "@dytesdk/ui-kit/dist/components/dyte-sidebar-ui.js";
import { DyteSidebar as DyteSidebarElement, defineCustomElement as defineDyteSidebar } from "@dytesdk/ui-kit/dist/components/dyte-sidebar.js";
import { DyteSimpleGrid as DyteSimpleGridElement, defineCustomElement as defineDyteSimpleGrid } from "@dytesdk/ui-kit/dist/components/dyte-simple-grid.js";
import { DyteSpeakerSelector as DyteSpeakerSelectorElement, defineCustomElement as defineDyteSpeakerSelector } from "@dytesdk/ui-kit/dist/components/dyte-speaker-selector.js";
import { DyteSpinner as DyteSpinnerElement, defineCustomElement as defineDyteSpinner } from "@dytesdk/ui-kit/dist/components/dyte-spinner.js";
import { DyteSpotlightGrid as DyteSpotlightGridElement, defineCustomElement as defineDyteSpotlightGrid } from "@dytesdk/ui-kit/dist/components/dyte-spotlight-grid.js";
import { DyteSpotlightIndicator as DyteSpotlightIndicatorElement, defineCustomElement as defineDyteSpotlightIndicator } from "@dytesdk/ui-kit/dist/components/dyte-spotlight-indicator.js";
import { DyteStageToggle as DyteStageToggleElement, defineCustomElement as defineDyteStageToggle } from "@dytesdk/ui-kit/dist/components/dyte-stage-toggle.js";
import { DyteStage as DyteStageElement, defineCustomElement as defineDyteStage } from "@dytesdk/ui-kit/dist/components/dyte-stage.js";
import { DyteSwitch as DyteSwitchElement, defineCustomElement as defineDyteSwitch } from "@dytesdk/ui-kit/dist/components/dyte-switch.js";
import { DyteTabBar as DyteTabBarElement, defineCustomElement as defineDyteTabBar } from "@dytesdk/ui-kit/dist/components/dyte-tab-bar.js";
import { DyteTextComposerView as DyteTextComposerViewElement, defineCustomElement as defineDyteTextComposerView } from "@dytesdk/ui-kit/dist/components/dyte-text-composer-view.js";
import { DyteTextField as DyteTextFieldElement, defineCustomElement as defineDyteTextField } from "@dytesdk/ui-kit/dist/components/dyte-text-field.js";
import { DyteTextMessageView as DyteTextMessageViewElement, defineCustomElement as defineDyteTextMessageView } from "@dytesdk/ui-kit/dist/components/dyte-text-message-view.js";
import { DyteTextMessage as DyteTextMessageElement, defineCustomElement as defineDyteTextMessage } from "@dytesdk/ui-kit/dist/components/dyte-text-message.js";
import { DyteTooltip as DyteTooltipElement, defineCustomElement as defineDyteTooltip } from "@dytesdk/ui-kit/dist/components/dyte-tooltip.js";
import { DyteTranscript as DyteTranscriptElement, defineCustomElement as defineDyteTranscript } from "@dytesdk/ui-kit/dist/components/dyte-transcript.js";
import { DyteTranscripts as DyteTranscriptsElement, defineCustomElement as defineDyteTranscripts } from "@dytesdk/ui-kit/dist/components/dyte-transcripts.js";
import { DyteUiProvider as DyteUiProviderElement, defineCustomElement as defineDyteUiProvider } from "@dytesdk/ui-kit/dist/components/dyte-ui-provider.js";
import { DyteViewerCount as DyteViewerCountElement, defineCustomElement as defineDyteViewerCount } from "@dytesdk/ui-kit/dist/components/dyte-viewer-count.js";
import { DyteVirtualizedParticipantList as DyteVirtualizedParticipantListElement, defineCustomElement as defineDyteVirtualizedParticipantList } from "@dytesdk/ui-kit/dist/components/dyte-virtualized-participant-list.js";
import { DyteWaitingScreen as DyteWaitingScreenElement, defineCustomElement as defineDyteWaitingScreen } from "@dytesdk/ui-kit/dist/components/dyte-waiting-screen.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type DyteAiEvents = { onDyteStateUpdate: EventName<DyteAiCustomEvent<States>> };

export const DyteAi: StencilReactComponent<DyteAiElement, DyteAiEvents> = /*@__PURE__*/ createComponent<DyteAiElement, DyteAiEvents>({
    tagName: 'dyte-ai',
    elementClass: DyteAiElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteAiEvents,
    defineCustomElement: defineDyteAi
});

type DyteAiChatEvents = NonNullable<unknown>;

export const DyteAiChat: StencilReactComponent<DyteAiChatElement, DyteAiChatEvents> = /*@__PURE__*/ createComponent<DyteAiChatElement, DyteAiChatEvents>({
    tagName: 'dyte-ai-chat',
    elementClass: DyteAiChatElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteAiChatEvents,
    defineCustomElement: defineDyteAiChat
});

type DyteAiHomeEvents = NonNullable<unknown>;

export const DyteAiHome: StencilReactComponent<DyteAiHomeElement, DyteAiHomeEvents> = /*@__PURE__*/ createComponent<DyteAiHomeElement, DyteAiHomeEvents>({
    tagName: 'dyte-ai-home',
    elementClass: DyteAiHomeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteAiHomeEvents,
    defineCustomElement: defineDyteAiHome
});

type DyteAiToggleEvents = { onDyteStateUpdate: EventName<DyteAiToggleCustomEvent<States>> };

export const DyteAiToggle: StencilReactComponent<DyteAiToggleElement, DyteAiToggleEvents> = /*@__PURE__*/ createComponent<DyteAiToggleElement, DyteAiToggleEvents>({
    tagName: 'dyte-ai-toggle',
    elementClass: DyteAiToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteAiToggleEvents,
    defineCustomElement: defineDyteAiToggle
});

type DyteAiTranscriptionsEvents = NonNullable<unknown>;

export const DyteAiTranscriptions: StencilReactComponent<DyteAiTranscriptionsElement, DyteAiTranscriptionsEvents> = /*@__PURE__*/ createComponent<DyteAiTranscriptionsElement, DyteAiTranscriptionsEvents>({
    tagName: 'dyte-ai-transcriptions',
    elementClass: DyteAiTranscriptionsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteAiTranscriptionsEvents,
    defineCustomElement: defineDyteAiTranscriptions
});

type DyteAudioGridEvents = NonNullable<unknown>;

export const DyteAudioGrid: StencilReactComponent<DyteAudioGridElement, DyteAudioGridEvents> = /*@__PURE__*/ createComponent<DyteAudioGridElement, DyteAudioGridEvents>({
    tagName: 'dyte-audio-grid',
    elementClass: DyteAudioGridElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteAudioGridEvents,
    defineCustomElement: defineDyteAudioGrid
});

type DyteAudioTileEvents = NonNullable<unknown>;

export const DyteAudioTile: StencilReactComponent<DyteAudioTileElement, DyteAudioTileEvents> = /*@__PURE__*/ createComponent<DyteAudioTileElement, DyteAudioTileEvents>({
    tagName: 'dyte-audio-tile',
    elementClass: DyteAudioTileElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteAudioTileEvents,
    defineCustomElement: defineDyteAudioTile
});

type DyteAudioVisualizerEvents = NonNullable<unknown>;

export const DyteAudioVisualizer: StencilReactComponent<DyteAudioVisualizerElement, DyteAudioVisualizerEvents> = /*@__PURE__*/ createComponent<DyteAudioVisualizerElement, DyteAudioVisualizerEvents>({
    tagName: 'dyte-audio-visualizer',
    elementClass: DyteAudioVisualizerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteAudioVisualizerEvents,
    defineCustomElement: defineDyteAudioVisualizer
});

type DyteAvatarEvents = NonNullable<unknown>;

export const DyteAvatar: StencilReactComponent<DyteAvatarElement, DyteAvatarEvents> = /*@__PURE__*/ createComponent<DyteAvatarElement, DyteAvatarEvents>({
    tagName: 'dyte-avatar',
    elementClass: DyteAvatarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteAvatarEvents,
    defineCustomElement: defineDyteAvatar
});

type DyteBreakoutRoomManagerEvents = {
    onParticipantsAdd: EventName<CustomEvent<null>>,
    onParticipantDelete: EventName<CustomEvent<{
        customParticipantId: string;
    }>>,
    onRoomJoin: EventName<CustomEvent<null>>,
    onDelete: EventName<CustomEvent<string>>,
    onUpdate: EventName<CustomEvent<{
        title: string | undefined;
        id: string;
    }>>
};

export const DyteBreakoutRoomManager: StencilReactComponent<DyteBreakoutRoomManagerElement, DyteBreakoutRoomManagerEvents> = /*@__PURE__*/ createComponent<DyteBreakoutRoomManagerElement, DyteBreakoutRoomManagerEvents>({
    tagName: 'dyte-breakout-room-manager',
    elementClass: DyteBreakoutRoomManagerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onParticipantsAdd: 'participantsAdd',
        onParticipantDelete: 'participantDelete',
        onRoomJoin: 'roomJoin',
        onDelete: 'delete',
        onUpdate: 'update'
    } as DyteBreakoutRoomManagerEvents,
    defineCustomElement: defineDyteBreakoutRoomManager
});

type DyteBreakoutRoomParticipantsEvents = {
    onSelectedParticipantsUpdate: EventName<CustomEvent<string[]>>,
    onAllParticipantsToggleUpdate: EventName<CustomEvent<string[]>>,
    onParticipantsDragging: EventName<CustomEvent<boolean>>
};

export const DyteBreakoutRoomParticipants: StencilReactComponent<DyteBreakoutRoomParticipantsElement, DyteBreakoutRoomParticipantsEvents> = /*@__PURE__*/ createComponent<DyteBreakoutRoomParticipantsElement, DyteBreakoutRoomParticipantsEvents>({
    tagName: 'dyte-breakout-room-participants',
    elementClass: DyteBreakoutRoomParticipantsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onSelectedParticipantsUpdate: 'selectedParticipantsUpdate',
        onAllParticipantsToggleUpdate: 'allParticipantsToggleUpdate',
        onParticipantsDragging: 'participantsDragging'
    } as DyteBreakoutRoomParticipantsEvents,
    defineCustomElement: defineDyteBreakoutRoomParticipants
});

type DyteBreakoutRoomsManagerEvents = { onDyteStateUpdate: EventName<DyteBreakoutRoomsManagerCustomEvent<Partial<States>>> };

export const DyteBreakoutRoomsManager: StencilReactComponent<DyteBreakoutRoomsManagerElement, DyteBreakoutRoomsManagerEvents> = /*@__PURE__*/ createComponent<DyteBreakoutRoomsManagerElement, DyteBreakoutRoomsManagerEvents>({
    tagName: 'dyte-breakout-rooms-manager',
    elementClass: DyteBreakoutRoomsManagerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteBreakoutRoomsManagerEvents,
    defineCustomElement: defineDyteBreakoutRoomsManager
});

type DyteBreakoutRoomsToggleEvents = { onDyteStateUpdate: EventName<DyteBreakoutRoomsToggleCustomEvent<Partial<States>>> };

export const DyteBreakoutRoomsToggle: StencilReactComponent<DyteBreakoutRoomsToggleElement, DyteBreakoutRoomsToggleEvents> = /*@__PURE__*/ createComponent<DyteBreakoutRoomsToggleElement, DyteBreakoutRoomsToggleEvents>({
    tagName: 'dyte-breakout-rooms-toggle',
    elementClass: DyteBreakoutRoomsToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteBreakoutRoomsToggleEvents,
    defineCustomElement: defineDyteBreakoutRoomsToggle
});

type DyteBroadcastMessageModalEvents = { onDyteStateUpdate: EventName<DyteBroadcastMessageModalCustomEvent<States>> };

export const DyteBroadcastMessageModal: StencilReactComponent<DyteBroadcastMessageModalElement, DyteBroadcastMessageModalEvents> = /*@__PURE__*/ createComponent<DyteBroadcastMessageModalElement, DyteBroadcastMessageModalEvents>({
    tagName: 'dyte-broadcast-message-modal',
    elementClass: DyteBroadcastMessageModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteBroadcastMessageModalEvents,
    defineCustomElement: defineDyteBroadcastMessageModal
});

type DyteButtonEvents = NonNullable<unknown>;

export const DyteButton: StencilReactComponent<DyteButtonElement, DyteButtonEvents> = /*@__PURE__*/ createComponent<DyteButtonElement, DyteButtonEvents>({
    tagName: 'dyte-button',
    elementClass: DyteButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteButtonEvents,
    defineCustomElement: defineDyteButton
});

type DyteCameraSelectorEvents = NonNullable<unknown>;

export const DyteCameraSelector: StencilReactComponent<DyteCameraSelectorElement, DyteCameraSelectorEvents> = /*@__PURE__*/ createComponent<DyteCameraSelectorElement, DyteCameraSelectorEvents>({
    tagName: 'dyte-camera-selector',
    elementClass: DyteCameraSelectorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteCameraSelectorEvents,
    defineCustomElement: defineDyteCameraSelector
});

type DyteCameraToggleEvents = { onDyteStateUpdate: EventName<DyteCameraToggleCustomEvent<States>> };

export const DyteCameraToggle: StencilReactComponent<DyteCameraToggleElement, DyteCameraToggleEvents> = /*@__PURE__*/ createComponent<DyteCameraToggleElement, DyteCameraToggleEvents>({
    tagName: 'dyte-camera-toggle',
    elementClass: DyteCameraToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteCameraToggleEvents,
    defineCustomElement: defineDyteCameraToggle
});

type DyteCaptionToggleEvents = { onDyteStateUpdate: EventName<DyteCaptionToggleCustomEvent<States>> };

export const DyteCaptionToggle: StencilReactComponent<DyteCaptionToggleElement, DyteCaptionToggleEvents> = /*@__PURE__*/ createComponent<DyteCaptionToggleElement, DyteCaptionToggleEvents>({
    tagName: 'dyte-caption-toggle',
    elementClass: DyteCaptionToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteCaptionToggleEvents,
    defineCustomElement: defineDyteCaptionToggle
});

type DyteChannelCreatorEvents = {
    onDyteStateUpdate: EventName<DyteChannelCreatorCustomEvent<States>>,
    onSwitchChannel: EventName<CustomEvent<string>>
};

export const DyteChannelCreator: StencilReactComponent<DyteChannelCreatorElement, DyteChannelCreatorEvents> = /*@__PURE__*/ createComponent<DyteChannelCreatorElement, DyteChannelCreatorEvents>({
    tagName: 'dyte-channel-creator',
    elementClass: DyteChannelCreatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDyteStateUpdate: 'dyteStateUpdate',
        onSwitchChannel: 'switchChannel'
    } as DyteChannelCreatorEvents,
    defineCustomElement: defineDyteChannelCreator
});

type DyteChannelDetailsEvents = NonNullable<unknown>;

export const DyteChannelDetails: StencilReactComponent<DyteChannelDetailsElement, DyteChannelDetailsEvents> = /*@__PURE__*/ createComponent<DyteChannelDetailsElement, DyteChannelDetailsEvents>({
    tagName: 'dyte-channel-details',
    elementClass: DyteChannelDetailsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteChannelDetailsEvents,
    defineCustomElement: defineDyteChannelDetails
});

type DyteChannelHeaderEvents = {
    onSearch: EventName<CustomEvent<string>>,
    onSearchDismissed: EventName<CustomEvent<any>>,
    onBack: EventName<CustomEvent<void>>
};

export const DyteChannelHeader: StencilReactComponent<DyteChannelHeaderElement, DyteChannelHeaderEvents> = /*@__PURE__*/ createComponent<DyteChannelHeaderElement, DyteChannelHeaderEvents>({
    tagName: 'dyte-channel-header',
    elementClass: DyteChannelHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onSearch: 'search',
        onSearchDismissed: 'searchDismissed',
        onBack: 'back'
    } as DyteChannelHeaderEvents,
    defineCustomElement: defineDyteChannelHeader
});

type DyteChannelSelectorUiEvents = { onChannelChanged: EventName<CustomEvent<string>> };

export const DyteChannelSelectorUi: StencilReactComponent<DyteChannelSelectorUiElement, DyteChannelSelectorUiEvents> = /*@__PURE__*/ createComponent<DyteChannelSelectorUiElement, DyteChannelSelectorUiEvents>({
    tagName: 'dyte-channel-selector-ui',
    elementClass: DyteChannelSelectorUiElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChannelChanged: 'channelChanged' } as DyteChannelSelectorUiEvents,
    defineCustomElement: defineDyteChannelSelectorUi
});

type DyteChannelSelectorViewEvents = {
    onChannelChange: EventName<DyteChannelSelectorViewCustomEvent<{
        id: string;
        name: string;
        avatarUrl?: string;
        icon?: keyof IconPack;
        latestMessage?: string;
        latestMessageTime?: Date;
        unreadCount?: number;
    }>>
};

export const DyteChannelSelectorView: StencilReactComponent<DyteChannelSelectorViewElement, DyteChannelSelectorViewEvents> = /*@__PURE__*/ createComponent<DyteChannelSelectorViewElement, DyteChannelSelectorViewEvents>({
    tagName: 'dyte-channel-selector-view',
    elementClass: DyteChannelSelectorViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onChannelChange: 'channelChange' } as DyteChannelSelectorViewEvents,
    defineCustomElement: defineDyteChannelSelectorView
});

type DyteChatEvents = { onDyteStateUpdate: EventName<DyteChatCustomEvent<States>> };

export const DyteChat: StencilReactComponent<DyteChatElement, DyteChatEvents> = /*@__PURE__*/ createComponent<DyteChatElement, DyteChatEvents>({
    tagName: 'dyte-chat',
    elementClass: DyteChatElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteChatEvents,
    defineCustomElement: defineDyteChat
});

type DyteChatComposerUiEvents = {
    onDyteNewMessage: EventName<DyteChatComposerUiCustomEvent<DyteNewMessageEvent>>,
    onDyteEditMessage: EventName<CustomEvent<{
        id: string;
        message: string;
        channelId?: string;
    }>>,
    onDyteEditCancelled: EventName<CustomEvent<any>>
};

export const DyteChatComposerUi: StencilReactComponent<DyteChatComposerUiElement, DyteChatComposerUiEvents> = /*@__PURE__*/ createComponent<DyteChatComposerUiElement, DyteChatComposerUiEvents>({
    tagName: 'dyte-chat-composer-ui',
    elementClass: DyteChatComposerUiElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDyteNewMessage: 'dyteNewMessage',
        onDyteEditMessage: 'dyteEditMessage',
        onDyteEditCancelled: 'dyteEditCancelled'
    } as DyteChatComposerUiEvents,
    defineCustomElement: defineDyteChatComposerUi
});

type DyteChatComposerViewEvents = {
    onNewMessage: EventName<DyteChatComposerViewCustomEvent<NewMessageEvent>>,
    onEditMessage: EventName<CustomEvent<string>>,
    onEditCancel: EventName<CustomEvent<void>>,
    onQuotedMessageDismiss: EventName<CustomEvent<void>>
};

export const DyteChatComposerView: StencilReactComponent<DyteChatComposerViewElement, DyteChatComposerViewEvents> = /*@__PURE__*/ createComponent<DyteChatComposerViewElement, DyteChatComposerViewEvents>({
    tagName: 'dyte-chat-composer-view',
    elementClass: DyteChatComposerViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onNewMessage: 'newMessage',
        onEditMessage: 'editMessage',
        onEditCancel: 'editCancel',
        onQuotedMessageDismiss: 'quotedMessageDismiss'
    } as DyteChatComposerViewEvents,
    defineCustomElement: defineDyteChatComposerView
});

type DyteChatMessageEvents = {
    onEdit: EventName<DyteChatMessageCustomEvent<Message>>,
    onReply: EventName<DyteChatMessageCustomEvent<Message>>,
    onPin: EventName<DyteChatMessageCustomEvent<Message>>,
    onDelete: EventName<DyteChatMessageCustomEvent<Message>>
};

export const DyteChatMessage: StencilReactComponent<DyteChatMessageElement, DyteChatMessageEvents> = /*@__PURE__*/ createComponent<DyteChatMessageElement, DyteChatMessageEvents>({
    tagName: 'dyte-chat-message',
    elementClass: DyteChatMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onEdit: 'edit',
        onReply: 'reply',
        onPin: 'pin',
        onDelete: 'delete'
    } as DyteChatMessageEvents,
    defineCustomElement: defineDyteChatMessage
});

type DyteChatMessagesUiEvents = {
    onPinMessage: EventName<DyteChatMessagesUiCustomEvent<Message>>,
    onDyteStateUpdate: EventName<DyteChatMessagesUiCustomEvent<States>>
};

export const DyteChatMessagesUi: StencilReactComponent<DyteChatMessagesUiElement, DyteChatMessagesUiEvents> = /*@__PURE__*/ createComponent<DyteChatMessagesUiElement, DyteChatMessagesUiEvents>({
    tagName: 'dyte-chat-messages-ui',
    elementClass: DyteChatMessagesUiElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPinMessage: 'pinMessage',
        onDyteStateUpdate: 'dyteStateUpdate'
    } as DyteChatMessagesUiEvents,
    defineCustomElement: defineDyteChatMessagesUi
});

type DyteChatMessagesUiPaginatedEvents = {
    onEditMessageInit: EventName<DyteChatMessagesUiPaginatedCustomEvent<{
        payload: TextMessage;
        flags: { isReply?: boolean; isEdit?: boolean };
    }>>,
    onPinMessage: EventName<DyteChatMessagesUiPaginatedCustomEvent<Message>>,
    onDeleteMessage: EventName<DyteChatMessagesUiPaginatedCustomEvent<Message>>,
    onDyteStateUpdate: EventName<DyteChatMessagesUiPaginatedCustomEvent<States>>
};

export const DyteChatMessagesUiPaginated: StencilReactComponent<DyteChatMessagesUiPaginatedElement, DyteChatMessagesUiPaginatedEvents> = /*@__PURE__*/ createComponent<DyteChatMessagesUiPaginatedElement, DyteChatMessagesUiPaginatedEvents>({
    tagName: 'dyte-chat-messages-ui-paginated',
    elementClass: DyteChatMessagesUiPaginatedElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onEditMessageInit: 'editMessageInit',
        onPinMessage: 'pinMessage',
        onDeleteMessage: 'deleteMessage',
        onDyteStateUpdate: 'dyteStateUpdate'
    } as DyteChatMessagesUiPaginatedEvents,
    defineCustomElement: defineDyteChatMessagesUiPaginated
});

type DyteChatSearchResultsEvents = NonNullable<unknown>;

export const DyteChatSearchResults: StencilReactComponent<DyteChatSearchResultsElement, DyteChatSearchResultsEvents> = /*@__PURE__*/ createComponent<DyteChatSearchResultsElement, DyteChatSearchResultsEvents>({
    tagName: 'dyte-chat-search-results',
    elementClass: DyteChatSearchResultsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteChatSearchResultsEvents,
    defineCustomElement: defineDyteChatSearchResults
});

type DyteChatSelectorUiEvents = { onDyteChatGroupChanged: EventName<DyteChatSelectorUiCustomEvent<ChatGroupChangedType>> };

export const DyteChatSelectorUi: StencilReactComponent<DyteChatSelectorUiElement, DyteChatSelectorUiEvents> = /*@__PURE__*/ createComponent<DyteChatSelectorUiElement, DyteChatSelectorUiEvents>({
    tagName: 'dyte-chat-selector-ui',
    elementClass: DyteChatSelectorUiElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteChatGroupChanged: 'dyteChatGroupChanged' } as DyteChatSelectorUiEvents,
    defineCustomElement: defineDyteChatSelectorUi
});

type DyteChatToggleEvents = { onDyteStateUpdate: EventName<DyteChatToggleCustomEvent<States>> };

export const DyteChatToggle: StencilReactComponent<DyteChatToggleElement, DyteChatToggleEvents> = /*@__PURE__*/ createComponent<DyteChatToggleElement, DyteChatToggleEvents>({
    tagName: 'dyte-chat-toggle',
    elementClass: DyteChatToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteChatToggleEvents,
    defineCustomElement: defineDyteChatToggle
});

type DyteClockEvents = NonNullable<unknown>;

export const DyteClock: StencilReactComponent<DyteClockElement, DyteClockEvents> = /*@__PURE__*/ createComponent<DyteClockElement, DyteClockEvents>({
    tagName: 'dyte-clock',
    elementClass: DyteClockElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteClockEvents,
    defineCustomElement: defineDyteClock
});

type DyteConfirmationModalEvents = { onDyteStateUpdate: EventName<DyteConfirmationModalCustomEvent<States>> };

export const DyteConfirmationModal: StencilReactComponent<DyteConfirmationModalElement, DyteConfirmationModalEvents> = /*@__PURE__*/ createComponent<DyteConfirmationModalElement, DyteConfirmationModalEvents>({
    tagName: 'dyte-confirmation-modal',
    elementClass: DyteConfirmationModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteConfirmationModalEvents,
    defineCustomElement: defineDyteConfirmationModal
});

type DyteControlbarEvents = NonNullable<unknown>;

export const DyteControlbar: StencilReactComponent<DyteControlbarElement, DyteControlbarEvents> = /*@__PURE__*/ createComponent<DyteControlbarElement, DyteControlbarEvents>({
    tagName: 'dyte-controlbar',
    elementClass: DyteControlbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteControlbarEvents,
    defineCustomElement: defineDyteControlbar
});

type DyteControlbarButtonEvents = NonNullable<unknown>;

export const DyteControlbarButton: StencilReactComponent<DyteControlbarButtonElement, DyteControlbarButtonEvents> = /*@__PURE__*/ createComponent<DyteControlbarButtonElement, DyteControlbarButtonEvents>({
    tagName: 'dyte-controlbar-button',
    elementClass: DyteControlbarButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteControlbarButtonEvents,
    defineCustomElement: defineDyteControlbarButton
});

type DyteCounterEvents = { onValueChange: EventName<CustomEvent<string>> };

export const DyteCounter: StencilReactComponent<DyteCounterElement, DyteCounterEvents> = /*@__PURE__*/ createComponent<DyteCounterElement, DyteCounterEvents>({
    tagName: 'dyte-counter',
    elementClass: DyteCounterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onValueChange: 'valueChange' } as DyteCounterEvents,
    defineCustomElement: defineDyteCounter
});

type DyteDebuggerEvents = { onDyteStateUpdate: EventName<DyteDebuggerCustomEvent<States>> };

export const DyteDebugger: StencilReactComponent<DyteDebuggerElement, DyteDebuggerEvents> = /*@__PURE__*/ createComponent<DyteDebuggerElement, DyteDebuggerEvents>({
    tagName: 'dyte-debugger',
    elementClass: DyteDebuggerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteDebuggerEvents,
    defineCustomElement: defineDyteDebugger
});

type DyteDebuggerAudioEvents = NonNullable<unknown>;

export const DyteDebuggerAudio: StencilReactComponent<DyteDebuggerAudioElement, DyteDebuggerAudioEvents> = /*@__PURE__*/ createComponent<DyteDebuggerAudioElement, DyteDebuggerAudioEvents>({
    tagName: 'dyte-debugger-audio',
    elementClass: DyteDebuggerAudioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteDebuggerAudioEvents,
    defineCustomElement: defineDyteDebuggerAudio
});

type DyteDebuggerScreenshareEvents = NonNullable<unknown>;

export const DyteDebuggerScreenshare: StencilReactComponent<DyteDebuggerScreenshareElement, DyteDebuggerScreenshareEvents> = /*@__PURE__*/ createComponent<DyteDebuggerScreenshareElement, DyteDebuggerScreenshareEvents>({
    tagName: 'dyte-debugger-screenshare',
    elementClass: DyteDebuggerScreenshareElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteDebuggerScreenshareEvents,
    defineCustomElement: defineDyteDebuggerScreenshare
});

type DyteDebuggerSystemEvents = NonNullable<unknown>;

export const DyteDebuggerSystem: StencilReactComponent<DyteDebuggerSystemElement, DyteDebuggerSystemEvents> = /*@__PURE__*/ createComponent<DyteDebuggerSystemElement, DyteDebuggerSystemEvents>({
    tagName: 'dyte-debugger-system',
    elementClass: DyteDebuggerSystemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteDebuggerSystemEvents,
    defineCustomElement: defineDyteDebuggerSystem
});

type DyteDebuggerToggleEvents = { onDyteStateUpdate: EventName<DyteDebuggerToggleCustomEvent<States>> };

export const DyteDebuggerToggle: StencilReactComponent<DyteDebuggerToggleElement, DyteDebuggerToggleEvents> = /*@__PURE__*/ createComponent<DyteDebuggerToggleElement, DyteDebuggerToggleEvents>({
    tagName: 'dyte-debugger-toggle',
    elementClass: DyteDebuggerToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteDebuggerToggleEvents,
    defineCustomElement: defineDyteDebuggerToggle
});

type DyteDebuggerVideoEvents = NonNullable<unknown>;

export const DyteDebuggerVideo: StencilReactComponent<DyteDebuggerVideoElement, DyteDebuggerVideoEvents> = /*@__PURE__*/ createComponent<DyteDebuggerVideoElement, DyteDebuggerVideoEvents>({
    tagName: 'dyte-debugger-video',
    elementClass: DyteDebuggerVideoElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteDebuggerVideoEvents,
    defineCustomElement: defineDyteDebuggerVideo
});

type DyteDialogEvents = { onDyteDialogClose: EventName<CustomEvent<any>> };

export const DyteDialog: StencilReactComponent<DyteDialogElement, DyteDialogEvents> = /*@__PURE__*/ createComponent<DyteDialogElement, DyteDialogEvents>({
    tagName: 'dyte-dialog',
    elementClass: DyteDialogElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteDialogClose: 'dyteDialogClose' } as DyteDialogEvents,
    defineCustomElement: defineDyteDialog
});

type DyteDialogManagerEvents = { onDyteStateUpdate: EventName<DyteDialogManagerCustomEvent<States>> };

export const DyteDialogManager: StencilReactComponent<DyteDialogManagerElement, DyteDialogManagerEvents> = /*@__PURE__*/ createComponent<DyteDialogManagerElement, DyteDialogManagerEvents>({
    tagName: 'dyte-dialog-manager',
    elementClass: DyteDialogManagerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteDialogManagerEvents,
    defineCustomElement: defineDyteDialogManager
});

type DyteDraftAttachmentViewEvents = { onDeleteAttachment: EventName<CustomEvent<any>> };

export const DyteDraftAttachmentView: StencilReactComponent<DyteDraftAttachmentViewElement, DyteDraftAttachmentViewEvents> = /*@__PURE__*/ createComponent<DyteDraftAttachmentViewElement, DyteDraftAttachmentViewEvents>({
    tagName: 'dyte-draft-attachment-view',
    elementClass: DyteDraftAttachmentViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDeleteAttachment: 'deleteAttachment' } as DyteDraftAttachmentViewEvents,
    defineCustomElement: defineDyteDraftAttachmentView
});

type DyteEmojiPickerEvents = {
    onPickerClose: EventName<CustomEvent<void>>,
    onDyteEmojiClicked: EventName<CustomEvent<string>>
};

export const DyteEmojiPicker: StencilReactComponent<DyteEmojiPickerElement, DyteEmojiPickerEvents> = /*@__PURE__*/ createComponent<DyteEmojiPickerElement, DyteEmojiPickerEvents>({
    tagName: 'dyte-emoji-picker',
    elementClass: DyteEmojiPickerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onPickerClose: 'pickerClose',
        onDyteEmojiClicked: 'dyteEmojiClicked'
    } as DyteEmojiPickerEvents,
    defineCustomElement: defineDyteEmojiPicker
});

type DyteEmojiPickerButtonEvents = NonNullable<unknown>;

export const DyteEmojiPickerButton: StencilReactComponent<DyteEmojiPickerButtonElement, DyteEmojiPickerButtonEvents> = /*@__PURE__*/ createComponent<DyteEmojiPickerButtonElement, DyteEmojiPickerButtonEvents>({
    tagName: 'dyte-emoji-picker-button',
    elementClass: DyteEmojiPickerButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteEmojiPickerButtonEvents,
    defineCustomElement: defineDyteEmojiPickerButton
});

type DyteEndedScreenEvents = NonNullable<unknown>;

export const DyteEndedScreen: StencilReactComponent<DyteEndedScreenElement, DyteEndedScreenEvents> = /*@__PURE__*/ createComponent<DyteEndedScreenElement, DyteEndedScreenEvents>({
    tagName: 'dyte-ended-screen',
    elementClass: DyteEndedScreenElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteEndedScreenEvents,
    defineCustomElement: defineDyteEndedScreen
});

type DyteFileDropzoneEvents = { onDropCallback: EventName<DyteFileDropzoneCustomEvent<DragEvent>> };

export const DyteFileDropzone: StencilReactComponent<DyteFileDropzoneElement, DyteFileDropzoneEvents> = /*@__PURE__*/ createComponent<DyteFileDropzoneElement, DyteFileDropzoneEvents>({
    tagName: 'dyte-file-dropzone',
    elementClass: DyteFileDropzoneElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDropCallback: 'dropCallback' } as DyteFileDropzoneEvents,
    defineCustomElement: defineDyteFileDropzone
});

type DyteFileMessageEvents = NonNullable<unknown>;

export const DyteFileMessage: StencilReactComponent<DyteFileMessageElement, DyteFileMessageEvents> = /*@__PURE__*/ createComponent<DyteFileMessageElement, DyteFileMessageEvents>({
    tagName: 'dyte-file-message',
    elementClass: DyteFileMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteFileMessageEvents,
    defineCustomElement: defineDyteFileMessage
});

type DyteFileMessageViewEvents = NonNullable<unknown>;

export const DyteFileMessageView: StencilReactComponent<DyteFileMessageViewElement, DyteFileMessageViewEvents> = /*@__PURE__*/ createComponent<DyteFileMessageViewElement, DyteFileMessageViewEvents>({
    tagName: 'dyte-file-message-view',
    elementClass: DyteFileMessageViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteFileMessageViewEvents,
    defineCustomElement: defineDyteFileMessageView
});

type DyteFilePickerButtonEvents = { onFileChange: EventName<DyteFilePickerButtonCustomEvent<File>> };

export const DyteFilePickerButton: StencilReactComponent<DyteFilePickerButtonElement, DyteFilePickerButtonEvents> = /*@__PURE__*/ createComponent<DyteFilePickerButtonElement, DyteFilePickerButtonEvents>({
    tagName: 'dyte-file-picker-button',
    elementClass: DyteFilePickerButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onFileChange: 'fileChange' } as DyteFilePickerButtonEvents,
    defineCustomElement: defineDyteFilePickerButton
});

type DyteFullscreenToggleEvents = { onDyteStateUpdate: EventName<DyteFullscreenToggleCustomEvent<States>> };

export const DyteFullscreenToggle: StencilReactComponent<DyteFullscreenToggleElement, DyteFullscreenToggleEvents> = /*@__PURE__*/ createComponent<DyteFullscreenToggleElement, DyteFullscreenToggleEvents>({
    tagName: 'dyte-fullscreen-toggle',
    elementClass: DyteFullscreenToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteFullscreenToggleEvents,
    defineCustomElement: defineDyteFullscreenToggle
});

type DyteGridEvents = { onDyteStateUpdate: EventName<DyteGridCustomEvent<States>> };

export const DyteGrid: StencilReactComponent<DyteGridElement, DyteGridEvents> = /*@__PURE__*/ createComponent<DyteGridElement, DyteGridEvents>({
    tagName: 'dyte-grid',
    elementClass: DyteGridElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteGridEvents,
    defineCustomElement: defineDyteGrid
});

type DyteGridPaginationEvents = NonNullable<unknown>;

export const DyteGridPagination: StencilReactComponent<DyteGridPaginationElement, DyteGridPaginationEvents> = /*@__PURE__*/ createComponent<DyteGridPaginationElement, DyteGridPaginationEvents>({
    tagName: 'dyte-grid-pagination',
    elementClass: DyteGridPaginationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteGridPaginationEvents,
    defineCustomElement: defineDyteGridPagination
});

type DyteHeaderEvents = NonNullable<unknown>;

export const DyteHeader: StencilReactComponent<DyteHeaderElement, DyteHeaderEvents> = /*@__PURE__*/ createComponent<DyteHeaderElement, DyteHeaderEvents>({
    tagName: 'dyte-header',
    elementClass: DyteHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteHeaderEvents,
    defineCustomElement: defineDyteHeader
});

type DyteIconEvents = NonNullable<unknown>;

export const DyteIcon: StencilReactComponent<DyteIconElement, DyteIconEvents> = /*@__PURE__*/ createComponent<DyteIconElement, DyteIconEvents>({
    tagName: 'dyte-icon',
    elementClass: DyteIconElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteIconEvents,
    defineCustomElement: defineDyteIcon
});

type DyteIdleScreenEvents = NonNullable<unknown>;

export const DyteIdleScreen: StencilReactComponent<DyteIdleScreenElement, DyteIdleScreenEvents> = /*@__PURE__*/ createComponent<DyteIdleScreenElement, DyteIdleScreenEvents>({
    tagName: 'dyte-idle-screen',
    elementClass: DyteIdleScreenElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteIdleScreenEvents,
    defineCustomElement: defineDyteIdleScreen
});

type DyteImageMessageEvents = { onDyteStateUpdate: EventName<DyteImageMessageCustomEvent<States>> };

export const DyteImageMessage: StencilReactComponent<DyteImageMessageElement, DyteImageMessageEvents> = /*@__PURE__*/ createComponent<DyteImageMessageElement, DyteImageMessageEvents>({
    tagName: 'dyte-image-message',
    elementClass: DyteImageMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteImageMessageEvents,
    defineCustomElement: defineDyteImageMessage
});

type DyteImageMessageViewEvents = { onPreview: EventName<CustomEvent<string>> };

export const DyteImageMessageView: StencilReactComponent<DyteImageMessageViewElement, DyteImageMessageViewEvents> = /*@__PURE__*/ createComponent<DyteImageMessageViewElement, DyteImageMessageViewEvents>({
    tagName: 'dyte-image-message-view',
    elementClass: DyteImageMessageViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onPreview: 'preview' } as DyteImageMessageViewEvents,
    defineCustomElement: defineDyteImageMessageView
});

type DyteImageViewerEvents = { onClose: EventName<CustomEvent<void>> };

export const DyteImageViewer: StencilReactComponent<DyteImageViewerElement, DyteImageViewerEvents> = /*@__PURE__*/ createComponent<DyteImageViewerElement, DyteImageViewerEvents>({
    tagName: 'dyte-image-viewer',
    elementClass: DyteImageViewerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onClose: 'close' } as DyteImageViewerEvents,
    defineCustomElement: defineDyteImageViewer
});

type DyteInformationTooltipEvents = NonNullable<unknown>;

export const DyteInformationTooltip: StencilReactComponent<DyteInformationTooltipElement, DyteInformationTooltipEvents> = /*@__PURE__*/ createComponent<DyteInformationTooltipElement, DyteInformationTooltipEvents>({
    tagName: 'dyte-information-tooltip',
    elementClass: DyteInformationTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteInformationTooltipEvents,
    defineCustomElement: defineDyteInformationTooltip
});

type DyteJoinStageEvents = {
    onDyteStateUpdate: EventName<DyteJoinStageCustomEvent<States>>,
    onDyteJoinStage: EventName<CustomEvent<void>>,
    onDyteLeaveStage: EventName<CustomEvent<void>>
};

export const DyteJoinStage: StencilReactComponent<DyteJoinStageElement, DyteJoinStageEvents> = /*@__PURE__*/ createComponent<DyteJoinStageElement, DyteJoinStageEvents>({
    tagName: 'dyte-join-stage',
    elementClass: DyteJoinStageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDyteStateUpdate: 'dyteStateUpdate',
        onDyteJoinStage: 'dyteJoinStage',
        onDyteLeaveStage: 'dyteLeaveStage'
    } as DyteJoinStageEvents,
    defineCustomElement: defineDyteJoinStage
});

type DyteLeaveButtonEvents = { onDyteStateUpdate: EventName<DyteLeaveButtonCustomEvent<States>> };

export const DyteLeaveButton: StencilReactComponent<DyteLeaveButtonElement, DyteLeaveButtonEvents> = /*@__PURE__*/ createComponent<DyteLeaveButtonElement, DyteLeaveButtonEvents>({
    tagName: 'dyte-leave-button',
    elementClass: DyteLeaveButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteLeaveButtonEvents,
    defineCustomElement: defineDyteLeaveButton
});

type DyteLeaveMeetingEvents = { onDyteStateUpdate: EventName<DyteLeaveMeetingCustomEvent<States>> };

export const DyteLeaveMeeting: StencilReactComponent<DyteLeaveMeetingElement, DyteLeaveMeetingEvents> = /*@__PURE__*/ createComponent<DyteLeaveMeetingElement, DyteLeaveMeetingEvents>({
    tagName: 'dyte-leave-meeting',
    elementClass: DyteLeaveMeetingElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteLeaveMeetingEvents,
    defineCustomElement: defineDyteLeaveMeeting
});

type DyteLivestreamIndicatorEvents = NonNullable<unknown>;

export const DyteLivestreamIndicator: StencilReactComponent<DyteLivestreamIndicatorElement, DyteLivestreamIndicatorEvents> = /*@__PURE__*/ createComponent<DyteLivestreamIndicatorElement, DyteLivestreamIndicatorEvents>({
    tagName: 'dyte-livestream-indicator',
    elementClass: DyteLivestreamIndicatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteLivestreamIndicatorEvents,
    defineCustomElement: defineDyteLivestreamIndicator
});

type DyteLivestreamPlayerEvents = {
    onDyteAPIError: EventName<CustomEvent<{
        trace: string;
        message: string;
    }>>
};

export const DyteLivestreamPlayer: StencilReactComponent<DyteLivestreamPlayerElement, DyteLivestreamPlayerEvents> = /*@__PURE__*/ createComponent<DyteLivestreamPlayerElement, DyteLivestreamPlayerEvents>({
    tagName: 'dyte-livestream-player',
    elementClass: DyteLivestreamPlayerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteAPIError: 'dyteAPIError' } as DyteLivestreamPlayerEvents,
    defineCustomElement: defineDyteLivestreamPlayer
});

type DyteLivestreamToggleEvents = {
    onDyteStateUpdate: EventName<DyteLivestreamToggleCustomEvent<States>>,
    onDyteAPIError: EventName<CustomEvent<{
        trace: string;
        message: string;
    }>>
};

export const DyteLivestreamToggle: StencilReactComponent<DyteLivestreamToggleElement, DyteLivestreamToggleEvents> = /*@__PURE__*/ createComponent<DyteLivestreamToggleElement, DyteLivestreamToggleEvents>({
    tagName: 'dyte-livestream-toggle',
    elementClass: DyteLivestreamToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDyteStateUpdate: 'dyteStateUpdate',
        onDyteAPIError: 'dyteAPIError'
    } as DyteLivestreamToggleEvents,
    defineCustomElement: defineDyteLivestreamToggle
});

type DyteLogoEvents = NonNullable<unknown>;

export const DyteLogo: StencilReactComponent<DyteLogoElement, DyteLogoEvents> = /*@__PURE__*/ createComponent<DyteLogoElement, DyteLogoEvents>({
    tagName: 'dyte-logo',
    elementClass: DyteLogoElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteLogoEvents,
    defineCustomElement: defineDyteLogo
});

type DyteMarkdownViewEvents = NonNullable<unknown>;

export const DyteMarkdownView: StencilReactComponent<DyteMarkdownViewElement, DyteMarkdownViewEvents> = /*@__PURE__*/ createComponent<DyteMarkdownViewElement, DyteMarkdownViewEvents>({
    tagName: 'dyte-markdown-view',
    elementClass: DyteMarkdownViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteMarkdownViewEvents,
    defineCustomElement: defineDyteMarkdownView
});

type DyteMeetingEvents = { onDyteStateUpdate: EventName<DyteMeetingCustomEvent<Partial<States>>> };

export const DyteMeeting: StencilReactComponent<DyteMeetingElement, DyteMeetingEvents> = /*@__PURE__*/ createComponent<DyteMeetingElement, DyteMeetingEvents>({
    tagName: 'dyte-meeting',
    elementClass: DyteMeetingElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteMeetingEvents,
    defineCustomElement: defineDyteMeeting
});

type DyteMeetingTitleEvents = NonNullable<unknown>;

export const DyteMeetingTitle: StencilReactComponent<DyteMeetingTitleElement, DyteMeetingTitleEvents> = /*@__PURE__*/ createComponent<DyteMeetingTitleElement, DyteMeetingTitleEvents>({
    tagName: 'dyte-meeting-title',
    elementClass: DyteMeetingTitleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteMeetingTitleEvents,
    defineCustomElement: defineDyteMeetingTitle
});

type DyteMenuEvents = NonNullable<unknown>;

export const DyteMenu: StencilReactComponent<DyteMenuElement, DyteMenuEvents> = /*@__PURE__*/ createComponent<DyteMenuElement, DyteMenuEvents>({
    tagName: 'dyte-menu',
    elementClass: DyteMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteMenuEvents,
    defineCustomElement: defineDyteMenu
});

type DyteMenuItemEvents = NonNullable<unknown>;

export const DyteMenuItem: StencilReactComponent<DyteMenuItemElement, DyteMenuItemEvents> = /*@__PURE__*/ createComponent<DyteMenuItemElement, DyteMenuItemEvents>({
    tagName: 'dyte-menu-item',
    elementClass: DyteMenuItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteMenuItemEvents,
    defineCustomElement: defineDyteMenuItem
});

type DyteMenuListEvents = NonNullable<unknown>;

export const DyteMenuList: StencilReactComponent<DyteMenuListElement, DyteMenuListEvents> = /*@__PURE__*/ createComponent<DyteMenuListElement, DyteMenuListEvents>({
    tagName: 'dyte-menu-list',
    elementClass: DyteMenuListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteMenuListEvents,
    defineCustomElement: defineDyteMenuList
});

type DyteMessageListViewEvents = NonNullable<unknown>;

export const DyteMessageListView: StencilReactComponent<DyteMessageListViewElement, DyteMessageListViewEvents> = /*@__PURE__*/ createComponent<DyteMessageListViewElement, DyteMessageListViewEvents>({
    tagName: 'dyte-message-list-view',
    elementClass: DyteMessageListViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteMessageListViewEvents,
    defineCustomElement: defineDyteMessageListView
});

type DyteMessageViewEvents = { onAction: EventName<CustomEvent<string>> };

export const DyteMessageView: StencilReactComponent<DyteMessageViewElement, DyteMessageViewEvents> = /*@__PURE__*/ createComponent<DyteMessageViewElement, DyteMessageViewEvents>({
    tagName: 'dyte-message-view',
    elementClass: DyteMessageViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAction: 'action' } as DyteMessageViewEvents,
    defineCustomElement: defineDyteMessageView
});

type DyteMicToggleEvents = { onDyteStateUpdate: EventName<DyteMicToggleCustomEvent<States>> };

export const DyteMicToggle: StencilReactComponent<DyteMicToggleElement, DyteMicToggleEvents> = /*@__PURE__*/ createComponent<DyteMicToggleElement, DyteMicToggleEvents>({
    tagName: 'dyte-mic-toggle',
    elementClass: DyteMicToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteMicToggleEvents,
    defineCustomElement: defineDyteMicToggle
});

type DyteMicrophoneSelectorEvents = NonNullable<unknown>;

export const DyteMicrophoneSelector: StencilReactComponent<DyteMicrophoneSelectorElement, DyteMicrophoneSelectorEvents> = /*@__PURE__*/ createComponent<DyteMicrophoneSelectorElement, DyteMicrophoneSelectorEvents>({
    tagName: 'dyte-microphone-selector',
    elementClass: DyteMicrophoneSelectorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteMicrophoneSelectorEvents,
    defineCustomElement: defineDyteMicrophoneSelector
});

type DyteMixedGridEvents = NonNullable<unknown>;

export const DyteMixedGrid: StencilReactComponent<DyteMixedGridElement, DyteMixedGridEvents> = /*@__PURE__*/ createComponent<DyteMixedGridElement, DyteMixedGridEvents>({
    tagName: 'dyte-mixed-grid',
    elementClass: DyteMixedGridElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteMixedGridEvents,
    defineCustomElement: defineDyteMixedGrid
});

type DyteMoreToggleEvents = { onDyteStateUpdate: EventName<DyteMoreToggleCustomEvent<States>> };

export const DyteMoreToggle: StencilReactComponent<DyteMoreToggleElement, DyteMoreToggleEvents> = /*@__PURE__*/ createComponent<DyteMoreToggleElement, DyteMoreToggleEvents>({
    tagName: 'dyte-more-toggle',
    elementClass: DyteMoreToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteMoreToggleEvents,
    defineCustomElement: defineDyteMoreToggle
});

type DyteMuteAllButtonEvents = { onDyteStateUpdate: EventName<DyteMuteAllButtonCustomEvent<States>> };

export const DyteMuteAllButton: StencilReactComponent<DyteMuteAllButtonElement, DyteMuteAllButtonEvents> = /*@__PURE__*/ createComponent<DyteMuteAllButtonElement, DyteMuteAllButtonEvents>({
    tagName: 'dyte-mute-all-button',
    elementClass: DyteMuteAllButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteMuteAllButtonEvents,
    defineCustomElement: defineDyteMuteAllButton
});

type DyteMuteAllConfirmationEvents = { onDyteStateUpdate: EventName<DyteMuteAllConfirmationCustomEvent<States>> };

export const DyteMuteAllConfirmation: StencilReactComponent<DyteMuteAllConfirmationElement, DyteMuteAllConfirmationEvents> = /*@__PURE__*/ createComponent<DyteMuteAllConfirmationElement, DyteMuteAllConfirmationEvents>({
    tagName: 'dyte-mute-all-confirmation',
    elementClass: DyteMuteAllConfirmationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteMuteAllConfirmationEvents,
    defineCustomElement: defineDyteMuteAllConfirmation
});

type DyteNameTagEvents = NonNullable<unknown>;

export const DyteNameTag: StencilReactComponent<DyteNameTagElement, DyteNameTagEvents> = /*@__PURE__*/ createComponent<DyteNameTagElement, DyteNameTagEvents>({
    tagName: 'dyte-name-tag',
    elementClass: DyteNameTagElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteNameTagEvents,
    defineCustomElement: defineDyteNameTag
});

type DyteNetworkIndicatorEvents = NonNullable<unknown>;

export const DyteNetworkIndicator: StencilReactComponent<DyteNetworkIndicatorElement, DyteNetworkIndicatorEvents> = /*@__PURE__*/ createComponent<DyteNetworkIndicatorElement, DyteNetworkIndicatorEvents>({
    tagName: 'dyte-network-indicator',
    elementClass: DyteNetworkIndicatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteNetworkIndicatorEvents,
    defineCustomElement: defineDyteNetworkIndicator
});

type DyteNotificationEvents = { onDyteNotificationDismiss: EventName<CustomEvent<string>> };

export const DyteNotification: StencilReactComponent<DyteNotificationElement, DyteNotificationEvents> = /*@__PURE__*/ createComponent<DyteNotificationElement, DyteNotificationEvents>({
    tagName: 'dyte-notification',
    elementClass: DyteNotificationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteNotificationDismiss: 'dyteNotificationDismiss' } as DyteNotificationEvents,
    defineCustomElement: defineDyteNotification
});

type DyteNotificationsEvents = NonNullable<unknown>;

export const DyteNotifications: StencilReactComponent<DyteNotificationsElement, DyteNotificationsEvents> = /*@__PURE__*/ createComponent<DyteNotificationsElement, DyteNotificationsEvents>({
    tagName: 'dyte-notifications',
    elementClass: DyteNotificationsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteNotificationsEvents,
    defineCustomElement: defineDyteNotifications
});

type DyteOverlayModalEvents = { onDyteStateUpdate: EventName<DyteOverlayModalCustomEvent<States>> };

export const DyteOverlayModal: StencilReactComponent<DyteOverlayModalElement, DyteOverlayModalEvents> = /*@__PURE__*/ createComponent<DyteOverlayModalElement, DyteOverlayModalEvents>({
    tagName: 'dyte-overlay-modal',
    elementClass: DyteOverlayModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteOverlayModalEvents,
    defineCustomElement: defineDyteOverlayModal
});

type DytePaginatedListEvents = NonNullable<unknown>;

export const DytePaginatedList: StencilReactComponent<DytePaginatedListElement, DytePaginatedListEvents> = /*@__PURE__*/ createComponent<DytePaginatedListElement, DytePaginatedListEvents>({
    tagName: 'dyte-paginated-list',
    elementClass: DytePaginatedListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DytePaginatedListEvents,
    defineCustomElement: defineDytePaginatedList
});

type DyteParticipantEvents = {
    onDyteSendNotification: EventName<CustomEvent<{
        trace: string;
        message: string;
    }>>
};

export const DyteParticipant: StencilReactComponent<DyteParticipantElement, DyteParticipantEvents> = /*@__PURE__*/ createComponent<DyteParticipantElement, DyteParticipantEvents>({
    tagName: 'dyte-participant',
    elementClass: DyteParticipantElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteSendNotification: 'dyteSendNotification' } as DyteParticipantEvents,
    defineCustomElement: defineDyteParticipant
});

type DyteParticipantCountEvents = NonNullable<unknown>;

export const DyteParticipantCount: StencilReactComponent<DyteParticipantCountElement, DyteParticipantCountEvents> = /*@__PURE__*/ createComponent<DyteParticipantCountElement, DyteParticipantCountEvents>({
    tagName: 'dyte-participant-count',
    elementClass: DyteParticipantCountElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteParticipantCountEvents,
    defineCustomElement: defineDyteParticipantCount
});

type DyteParticipantSetupEvents = NonNullable<unknown>;

export const DyteParticipantSetup: StencilReactComponent<DyteParticipantSetupElement, DyteParticipantSetupEvents> = /*@__PURE__*/ createComponent<DyteParticipantSetupElement, DyteParticipantSetupEvents>({
    tagName: 'dyte-participant-setup',
    elementClass: DyteParticipantSetupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteParticipantSetupEvents,
    defineCustomElement: defineDyteParticipantSetup
});

type DyteParticipantTileEvents = {
    onTileLoad: EventName<DyteParticipantTileCustomEvent<{ participant: Peer; videoElement: HTMLVideoElement }>>,
    onTileUnload: EventName<DyteParticipantTileCustomEvent<Peer>>
};

export const DyteParticipantTile: StencilReactComponent<DyteParticipantTileElement, DyteParticipantTileEvents> = /*@__PURE__*/ createComponent<DyteParticipantTileElement, DyteParticipantTileEvents>({
    tagName: 'dyte-participant-tile',
    elementClass: DyteParticipantTileElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onTileLoad: 'tileLoad',
        onTileUnload: 'tileUnload'
    } as DyteParticipantTileEvents,
    defineCustomElement: defineDyteParticipantTile
});

type DyteParticipantsEvents = { onDyteStateUpdate: EventName<DyteParticipantsCustomEvent<States>> };

export const DyteParticipants: StencilReactComponent<DyteParticipantsElement, DyteParticipantsEvents> = /*@__PURE__*/ createComponent<DyteParticipantsElement, DyteParticipantsEvents>({
    tagName: 'dyte-participants',
    elementClass: DyteParticipantsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteParticipantsEvents,
    defineCustomElement: defineDyteParticipants
});

type DyteParticipantsAudioEvents = { onDialogClose: EventName<CustomEvent<void>> };

export const DyteParticipantsAudio: StencilReactComponent<DyteParticipantsAudioElement, DyteParticipantsAudioEvents> = /*@__PURE__*/ createComponent<DyteParticipantsAudioElement, DyteParticipantsAudioEvents>({
    tagName: 'dyte-participants-audio',
    elementClass: DyteParticipantsAudioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDialogClose: 'dialogClose' } as DyteParticipantsAudioEvents,
    defineCustomElement: defineDyteParticipantsAudio
});

type DyteParticipantsStageListEvents = NonNullable<unknown>;

export const DyteParticipantsStageList: StencilReactComponent<DyteParticipantsStageListElement, DyteParticipantsStageListEvents> = /*@__PURE__*/ createComponent<DyteParticipantsStageListElement, DyteParticipantsStageListEvents>({
    tagName: 'dyte-participants-stage-list',
    elementClass: DyteParticipantsStageListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteParticipantsStageListEvents,
    defineCustomElement: defineDyteParticipantsStageList
});

type DyteParticipantsStageQueueEvents = NonNullable<unknown>;

export const DyteParticipantsStageQueue: StencilReactComponent<DyteParticipantsStageQueueElement, DyteParticipantsStageQueueEvents> = /*@__PURE__*/ createComponent<DyteParticipantsStageQueueElement, DyteParticipantsStageQueueEvents>({
    tagName: 'dyte-participants-stage-queue',
    elementClass: DyteParticipantsStageQueueElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteParticipantsStageQueueEvents,
    defineCustomElement: defineDyteParticipantsStageQueue
});

type DyteParticipantsToggleEvents = { onDyteStateUpdate: EventName<DyteParticipantsToggleCustomEvent<States>> };

export const DyteParticipantsToggle: StencilReactComponent<DyteParticipantsToggleElement, DyteParticipantsToggleEvents> = /*@__PURE__*/ createComponent<DyteParticipantsToggleElement, DyteParticipantsToggleEvents>({
    tagName: 'dyte-participants-toggle',
    elementClass: DyteParticipantsToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteParticipantsToggleEvents,
    defineCustomElement: defineDyteParticipantsToggle
});

type DyteParticipantsViewerListEvents = NonNullable<unknown>;

export const DyteParticipantsViewerList: StencilReactComponent<DyteParticipantsViewerListElement, DyteParticipantsViewerListEvents> = /*@__PURE__*/ createComponent<DyteParticipantsViewerListElement, DyteParticipantsViewerListEvents>({
    tagName: 'dyte-participants-viewer-list',
    elementClass: DyteParticipantsViewerListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteParticipantsViewerListEvents,
    defineCustomElement: defineDyteParticipantsViewerList
});

type DyteParticipantsWaitingListEvents = NonNullable<unknown>;

export const DyteParticipantsWaitingList: StencilReactComponent<DyteParticipantsWaitingListElement, DyteParticipantsWaitingListEvents> = /*@__PURE__*/ createComponent<DyteParticipantsWaitingListElement, DyteParticipantsWaitingListEvents>({
    tagName: 'dyte-participants-waiting-list',
    elementClass: DyteParticipantsWaitingListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteParticipantsWaitingListEvents,
    defineCustomElement: defineDyteParticipantsWaitingList
});

type DytePermissionsMessageEvents = { onDyteStateUpdate: EventName<DytePermissionsMessageCustomEvent<States>> };

export const DytePermissionsMessage: StencilReactComponent<DytePermissionsMessageElement, DytePermissionsMessageEvents> = /*@__PURE__*/ createComponent<DytePermissionsMessageElement, DytePermissionsMessageEvents>({
    tagName: 'dyte-permissions-message',
    elementClass: DytePermissionsMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DytePermissionsMessageEvents,
    defineCustomElement: defineDytePermissionsMessage
});

type DytePipToggleEvents = { onDyteStateUpdate: EventName<DytePipToggleCustomEvent<States>> };

export const DytePipToggle: StencilReactComponent<DytePipToggleElement, DytePipToggleEvents> = /*@__PURE__*/ createComponent<DytePipToggleElement, DytePipToggleEvents>({
    tagName: 'dyte-pip-toggle',
    elementClass: DytePipToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DytePipToggleEvents,
    defineCustomElement: defineDytePipToggle
});

type DytePluginMainEvents = NonNullable<unknown>;

export const DytePluginMain: StencilReactComponent<DytePluginMainElement, DytePluginMainEvents> = /*@__PURE__*/ createComponent<DytePluginMainElement, DytePluginMainEvents>({
    tagName: 'dyte-plugin-main',
    elementClass: DytePluginMainElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DytePluginMainEvents,
    defineCustomElement: defineDytePluginMain
});

type DytePluginsEvents = { onDyteStateUpdate: EventName<DytePluginsCustomEvent<States>> };

export const DytePlugins: StencilReactComponent<DytePluginsElement, DytePluginsEvents> = /*@__PURE__*/ createComponent<DytePluginsElement, DytePluginsEvents>({
    tagName: 'dyte-plugins',
    elementClass: DytePluginsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DytePluginsEvents,
    defineCustomElement: defineDytePlugins
});

type DytePluginsToggleEvents = { onDyteStateUpdate: EventName<DytePluginsToggleCustomEvent<States>> };

export const DytePluginsToggle: StencilReactComponent<DytePluginsToggleElement, DytePluginsToggleEvents> = /*@__PURE__*/ createComponent<DytePluginsToggleElement, DytePluginsToggleEvents>({
    tagName: 'dyte-plugins-toggle',
    elementClass: DytePluginsToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DytePluginsToggleEvents,
    defineCustomElement: defineDytePluginsToggle
});

type DytePollEvents = {
    onDyteVotePoll: EventName<CustomEvent<{
        id: string;
        index: number;
    }>>
};

export const DytePoll: StencilReactComponent<DytePollElement, DytePollEvents> = /*@__PURE__*/ createComponent<DytePollElement, DytePollEvents>({
    tagName: 'dyte-poll',
    elementClass: DytePollElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteVotePoll: 'dyteVotePoll' } as DytePollEvents,
    defineCustomElement: defineDytePoll
});

type DytePollFormEvents = { onDyteCreatePoll: EventName<DytePollFormCustomEvent<PollObject>> };

export const DytePollForm: StencilReactComponent<DytePollFormElement, DytePollFormEvents> = /*@__PURE__*/ createComponent<DytePollFormElement, DytePollFormEvents>({
    tagName: 'dyte-poll-form',
    elementClass: DytePollFormElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteCreatePoll: 'dyteCreatePoll' } as DytePollFormEvents,
    defineCustomElement: defineDytePollForm
});

type DytePollsEvents = NonNullable<unknown>;

export const DytePolls: StencilReactComponent<DytePollsElement, DytePollsEvents> = /*@__PURE__*/ createComponent<DytePollsElement, DytePollsEvents>({
    tagName: 'dyte-polls',
    elementClass: DytePollsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DytePollsEvents,
    defineCustomElement: defineDytePolls
});

type DytePollsToggleEvents = { onDyteStateUpdate: EventName<DytePollsToggleCustomEvent<States>> };

export const DytePollsToggle: StencilReactComponent<DytePollsToggleElement, DytePollsToggleEvents> = /*@__PURE__*/ createComponent<DytePollsToggleElement, DytePollsToggleEvents>({
    tagName: 'dyte-polls-toggle',
    elementClass: DytePollsToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DytePollsToggleEvents,
    defineCustomElement: defineDytePollsToggle
});

type DyteRecordingIndicatorEvents = NonNullable<unknown>;

export const DyteRecordingIndicator: StencilReactComponent<DyteRecordingIndicatorElement, DyteRecordingIndicatorEvents> = /*@__PURE__*/ createComponent<DyteRecordingIndicatorElement, DyteRecordingIndicatorEvents>({
    tagName: 'dyte-recording-indicator',
    elementClass: DyteRecordingIndicatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteRecordingIndicatorEvents,
    defineCustomElement: defineDyteRecordingIndicator
});

type DyteRecordingToggleEvents = {
    onDyteAPIError: EventName<CustomEvent<{
        trace: string;
        message: string;
    }>>
};

export const DyteRecordingToggle: StencilReactComponent<DyteRecordingToggleElement, DyteRecordingToggleEvents> = /*@__PURE__*/ createComponent<DyteRecordingToggleElement, DyteRecordingToggleEvents>({
    tagName: 'dyte-recording-toggle',
    elementClass: DyteRecordingToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteAPIError: 'dyteAPIError' } as DyteRecordingToggleEvents,
    defineCustomElement: defineDyteRecordingToggle
});

type DyteScreenShareToggleEvents = {
    onDyteStateUpdate: EventName<DyteScreenShareToggleCustomEvent<States>>,
    onDyteAPIError: EventName<CustomEvent<{
        trace: string;
        message: string;
    }>>
};

export const DyteScreenShareToggle: StencilReactComponent<DyteScreenShareToggleElement, DyteScreenShareToggleEvents> = /*@__PURE__*/ createComponent<DyteScreenShareToggleElement, DyteScreenShareToggleEvents>({
    tagName: 'dyte-screen-share-toggle',
    elementClass: DyteScreenShareToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDyteStateUpdate: 'dyteStateUpdate',
        onDyteAPIError: 'dyteAPIError'
    } as DyteScreenShareToggleEvents,
    defineCustomElement: defineDyteScreenShareToggle
});

type DyteScreenshareViewEvents = {
    onDyteStateUpdate: EventName<DyteScreenshareViewCustomEvent<States>>,
    onScreensharePlay: EventName<DyteScreenshareViewCustomEvent<{
        participant: Peer;
        screenshareParticipant: Peer;
    }>>
};

export const DyteScreenshareView: StencilReactComponent<DyteScreenshareViewElement, DyteScreenshareViewEvents> = /*@__PURE__*/ createComponent<DyteScreenshareViewElement, DyteScreenshareViewEvents>({
    tagName: 'dyte-screenshare-view',
    elementClass: DyteScreenshareViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onDyteStateUpdate: 'dyteStateUpdate',
        onScreensharePlay: 'screensharePlay'
    } as DyteScreenshareViewEvents,
    defineCustomElement: defineDyteScreenshareView
});

type DyteSettingsEvents = { onDyteStateUpdate: EventName<DyteSettingsCustomEvent<States>> };

export const DyteSettings: StencilReactComponent<DyteSettingsElement, DyteSettingsEvents> = /*@__PURE__*/ createComponent<DyteSettingsElement, DyteSettingsEvents>({
    tagName: 'dyte-settings',
    elementClass: DyteSettingsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteSettingsEvents,
    defineCustomElement: defineDyteSettings
});

type DyteSettingsAudioEvents = { onDyteStateUpdate: EventName<DyteSettingsAudioCustomEvent<States>> };

export const DyteSettingsAudio: StencilReactComponent<DyteSettingsAudioElement, DyteSettingsAudioEvents> = /*@__PURE__*/ createComponent<DyteSettingsAudioElement, DyteSettingsAudioEvents>({
    tagName: 'dyte-settings-audio',
    elementClass: DyteSettingsAudioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteSettingsAudioEvents,
    defineCustomElement: defineDyteSettingsAudio
});

type DyteSettingsToggleEvents = { onDyteStateUpdate: EventName<DyteSettingsToggleCustomEvent<States>> };

export const DyteSettingsToggle: StencilReactComponent<DyteSettingsToggleElement, DyteSettingsToggleEvents> = /*@__PURE__*/ createComponent<DyteSettingsToggleElement, DyteSettingsToggleEvents>({
    tagName: 'dyte-settings-toggle',
    elementClass: DyteSettingsToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteSettingsToggleEvents,
    defineCustomElement: defineDyteSettingsToggle
});

type DyteSettingsVideoEvents = { onDyteStateUpdate: EventName<DyteSettingsVideoCustomEvent<States>> };

export const DyteSettingsVideo: StencilReactComponent<DyteSettingsVideoElement, DyteSettingsVideoEvents> = /*@__PURE__*/ createComponent<DyteSettingsVideoElement, DyteSettingsVideoEvents>({
    tagName: 'dyte-settings-video',
    elementClass: DyteSettingsVideoElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteSettingsVideoEvents,
    defineCustomElement: defineDyteSettingsVideo
});

type DyteSetupScreenEvents = { onDyteStateUpdate: EventName<DyteSetupScreenCustomEvent<States>> };

export const DyteSetupScreen: StencilReactComponent<DyteSetupScreenElement, DyteSetupScreenEvents> = /*@__PURE__*/ createComponent<DyteSetupScreenElement, DyteSetupScreenEvents>({
    tagName: 'dyte-setup-screen',
    elementClass: DyteSetupScreenElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteSetupScreenEvents,
    defineCustomElement: defineDyteSetupScreen
});

type DyteSidebarEvents = { onDyteStateUpdate: EventName<DyteSidebarCustomEvent<States>> };

export const DyteSidebar: StencilReactComponent<DyteSidebarElement, DyteSidebarEvents> = /*@__PURE__*/ createComponent<DyteSidebarElement, DyteSidebarEvents>({
    tagName: 'dyte-sidebar',
    elementClass: DyteSidebarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteSidebarEvents,
    defineCustomElement: defineDyteSidebar
});

type DyteSidebarUiEvents = {
    onTabChange: EventName<CustomEvent<string>>,
    onSidebarClose: EventName<CustomEvent<void>>
};

export const DyteSidebarUi: StencilReactComponent<DyteSidebarUiElement, DyteSidebarUiEvents> = /*@__PURE__*/ createComponent<DyteSidebarUiElement, DyteSidebarUiEvents>({
    tagName: 'dyte-sidebar-ui',
    elementClass: DyteSidebarUiElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onTabChange: 'tabChange',
        onSidebarClose: 'sidebarClose'
    } as DyteSidebarUiEvents,
    defineCustomElement: defineDyteSidebarUi
});

type DyteSimpleGridEvents = NonNullable<unknown>;

export const DyteSimpleGrid: StencilReactComponent<DyteSimpleGridElement, DyteSimpleGridEvents> = /*@__PURE__*/ createComponent<DyteSimpleGridElement, DyteSimpleGridEvents>({
    tagName: 'dyte-simple-grid',
    elementClass: DyteSimpleGridElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteSimpleGridEvents,
    defineCustomElement: defineDyteSimpleGrid
});

type DyteSpeakerSelectorEvents = NonNullable<unknown>;

export const DyteSpeakerSelector: StencilReactComponent<DyteSpeakerSelectorElement, DyteSpeakerSelectorEvents> = /*@__PURE__*/ createComponent<DyteSpeakerSelectorElement, DyteSpeakerSelectorEvents>({
    tagName: 'dyte-speaker-selector',
    elementClass: DyteSpeakerSelectorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteSpeakerSelectorEvents,
    defineCustomElement: defineDyteSpeakerSelector
});

type DyteSpinnerEvents = NonNullable<unknown>;

export const DyteSpinner: StencilReactComponent<DyteSpinnerElement, DyteSpinnerEvents> = /*@__PURE__*/ createComponent<DyteSpinnerElement, DyteSpinnerEvents>({
    tagName: 'dyte-spinner',
    elementClass: DyteSpinnerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteSpinnerEvents,
    defineCustomElement: defineDyteSpinner
});

type DyteSpotlightGridEvents = NonNullable<unknown>;

export const DyteSpotlightGrid: StencilReactComponent<DyteSpotlightGridElement, DyteSpotlightGridEvents> = /*@__PURE__*/ createComponent<DyteSpotlightGridElement, DyteSpotlightGridEvents>({
    tagName: 'dyte-spotlight-grid',
    elementClass: DyteSpotlightGridElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteSpotlightGridEvents,
    defineCustomElement: defineDyteSpotlightGrid
});

type DyteSpotlightIndicatorEvents = NonNullable<unknown>;

export const DyteSpotlightIndicator: StencilReactComponent<DyteSpotlightIndicatorElement, DyteSpotlightIndicatorEvents> = /*@__PURE__*/ createComponent<DyteSpotlightIndicatorElement, DyteSpotlightIndicatorEvents>({
    tagName: 'dyte-spotlight-indicator',
    elementClass: DyteSpotlightIndicatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteSpotlightIndicatorEvents,
    defineCustomElement: defineDyteSpotlightIndicator
});

type DyteStageEvents = { onDyteStateUpdate: EventName<DyteStageCustomEvent<States>> };

export const DyteStage: StencilReactComponent<DyteStageElement, DyteStageEvents> = /*@__PURE__*/ createComponent<DyteStageElement, DyteStageEvents>({
    tagName: 'dyte-stage',
    elementClass: DyteStageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteStageEvents,
    defineCustomElement: defineDyteStage
});

type DyteStageToggleEvents = { onDyteStateUpdate: EventName<DyteStageToggleCustomEvent<States>> };

export const DyteStageToggle: StencilReactComponent<DyteStageToggleElement, DyteStageToggleEvents> = /*@__PURE__*/ createComponent<DyteStageToggleElement, DyteStageToggleEvents>({
    tagName: 'dyte-stage-toggle',
    elementClass: DyteStageToggleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteStageToggleEvents,
    defineCustomElement: defineDyteStageToggle
});

type DyteSwitchEvents = { onDyteChange: EventName<CustomEvent<boolean>> };

export const DyteSwitch: StencilReactComponent<DyteSwitchElement, DyteSwitchEvents> = /*@__PURE__*/ createComponent<DyteSwitchElement, DyteSwitchEvents>({
    tagName: 'dyte-switch',
    elementClass: DyteSwitchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteChange: 'dyteChange' } as DyteSwitchEvents,
    defineCustomElement: defineDyteSwitch
});

type DyteTabBarEvents = { onTabChange: EventName<DyteTabBarCustomEvent<Tab>> };

export const DyteTabBar: StencilReactComponent<DyteTabBarElement, DyteTabBarEvents> = /*@__PURE__*/ createComponent<DyteTabBarElement, DyteTabBarEvents>({
    tagName: 'dyte-tab-bar',
    elementClass: DyteTabBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onTabChange: 'tabChange' } as DyteTabBarEvents,
    defineCustomElement: defineDyteTabBar
});

type DyteTextComposerViewEvents = { onTextChange: EventName<CustomEvent<string>> };

export const DyteTextComposerView: StencilReactComponent<DyteTextComposerViewElement, DyteTextComposerViewEvents> = /*@__PURE__*/ createComponent<DyteTextComposerViewElement, DyteTextComposerViewEvents>({
    tagName: 'dyte-text-composer-view',
    elementClass: DyteTextComposerViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onTextChange: 'textChange' } as DyteTextComposerViewEvents,
    defineCustomElement: defineDyteTextComposerView
});

type DyteTextFieldEvents = { onDyteStateUpdate: EventName<DyteTextFieldCustomEvent<States>> };

export const DyteTextField: StencilReactComponent<DyteTextFieldElement, DyteTextFieldEvents> = /*@__PURE__*/ createComponent<DyteTextFieldElement, DyteTextFieldEvents>({
    tagName: 'dyte-text-field',
    elementClass: DyteTextFieldElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteStateUpdate: 'dyteStateUpdate' } as DyteTextFieldEvents,
    defineCustomElement: defineDyteTextField
});

type DyteTextMessageEvents = NonNullable<unknown>;

export const DyteTextMessage: StencilReactComponent<DyteTextMessageElement, DyteTextMessageEvents> = /*@__PURE__*/ createComponent<DyteTextMessageElement, DyteTextMessageEvents>({
    tagName: 'dyte-text-message',
    elementClass: DyteTextMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteTextMessageEvents,
    defineCustomElement: defineDyteTextMessage
});

type DyteTextMessageViewEvents = NonNullable<unknown>;

export const DyteTextMessageView: StencilReactComponent<DyteTextMessageViewElement, DyteTextMessageViewEvents> = /*@__PURE__*/ createComponent<DyteTextMessageViewElement, DyteTextMessageViewEvents>({
    tagName: 'dyte-text-message-view',
    elementClass: DyteTextMessageViewElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteTextMessageViewEvents,
    defineCustomElement: defineDyteTextMessageView
});

type DyteTooltipEvents = { onDyteOpenChange: EventName<CustomEvent<boolean>> };

export const DyteTooltip: StencilReactComponent<DyteTooltipElement, DyteTooltipEvents> = /*@__PURE__*/ createComponent<DyteTooltipElement, DyteTooltipEvents>({
    tagName: 'dyte-tooltip',
    elementClass: DyteTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteOpenChange: 'dyteOpenChange' } as DyteTooltipEvents,
    defineCustomElement: defineDyteTooltip
});

type DyteTranscriptEvents = {
    onDyteTranscriptDismiss: EventName<CustomEvent<{
        id: string;
        renderedId: string;
    }>>
};

export const DyteTranscript: StencilReactComponent<DyteTranscriptElement, DyteTranscriptEvents> = /*@__PURE__*/ createComponent<DyteTranscriptElement, DyteTranscriptEvents>({
    tagName: 'dyte-transcript',
    elementClass: DyteTranscriptElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDyteTranscriptDismiss: 'dyteTranscriptDismiss' } as DyteTranscriptEvents,
    defineCustomElement: defineDyteTranscript
});

type DyteTranscriptsEvents = NonNullable<unknown>;

export const DyteTranscripts: StencilReactComponent<DyteTranscriptsElement, DyteTranscriptsEvents> = /*@__PURE__*/ createComponent<DyteTranscriptsElement, DyteTranscriptsEvents>({
    tagName: 'dyte-transcripts',
    elementClass: DyteTranscriptsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteTranscriptsEvents,
    defineCustomElement: defineDyteTranscripts
});

type DyteUiProviderEvents = NonNullable<unknown>;

export const DyteUiProvider: StencilReactComponent<DyteUiProviderElement, DyteUiProviderEvents> = /*@__PURE__*/ createComponent<DyteUiProviderElement, DyteUiProviderEvents>({
    tagName: 'dyte-ui-provider',
    elementClass: DyteUiProviderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteUiProviderEvents,
    defineCustomElement: defineDyteUiProvider
});

type DyteViewerCountEvents = NonNullable<unknown>;

export const DyteViewerCount: StencilReactComponent<DyteViewerCountElement, DyteViewerCountEvents> = /*@__PURE__*/ createComponent<DyteViewerCountElement, DyteViewerCountEvents>({
    tagName: 'dyte-viewer-count',
    elementClass: DyteViewerCountElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteViewerCountEvents,
    defineCustomElement: defineDyteViewerCount
});

type DyteVirtualizedParticipantListEvents = NonNullable<unknown>;

export const DyteVirtualizedParticipantList: StencilReactComponent<DyteVirtualizedParticipantListElement, DyteVirtualizedParticipantListEvents> = /*@__PURE__*/ createComponent<DyteVirtualizedParticipantListElement, DyteVirtualizedParticipantListEvents>({
    tagName: 'dyte-virtualized-participant-list',
    elementClass: DyteVirtualizedParticipantListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteVirtualizedParticipantListEvents,
    defineCustomElement: defineDyteVirtualizedParticipantList
});

type DyteWaitingScreenEvents = NonNullable<unknown>;

export const DyteWaitingScreen: StencilReactComponent<DyteWaitingScreenElement, DyteWaitingScreenEvents> = /*@__PURE__*/ createComponent<DyteWaitingScreenElement, DyteWaitingScreenEvents>({
    tagName: 'dyte-waiting-screen',
    elementClass: DyteWaitingScreenElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as DyteWaitingScreenEvents,
    defineCustomElement: defineDyteWaitingScreen
});
