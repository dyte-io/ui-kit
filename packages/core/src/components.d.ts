/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AISection, AIView } from "./components/dyte-ai/dyte-ai";
import { Meeting, Peer, WaitlistedParticipant } from "./types/dyte-client";
import { Chat, ChatChannel, Notification, Poll, PollObject, Size, States, Transcript } from "./types/props";
import { UIConfig } from "./types/ui-config";
import { IconPack } from "./lib/icons";
import { DyteI18n } from "./lib/lang";
import { AIMessage } from "./types/dyte-ai";
import { ControlBarVariant } from "./components/dyte-controlbar-button/dyte-controlbar-button";
import { DyteI18n as DyteI18n1, IconPack as IconPack1, Size as Size1, States as States1, UIConfig as UIConfig1 } from "./exports";
import { AudioVisualizerVariant } from "./components/dyte-audio-visualizer/dyte-audio-visualizer";
import { AvatarVariant } from "./components/dyte-avatar/dyte-avatar";
import { DraftMeeting } from "./utils/breakout-rooms-manager";
import { ButtonKind, ButtonVariant } from "./components/dyte-button/dyte-button";
import { DyteBasicParticipant, DytePermissionsPreset, DytePlugin, FileMessage, ImageMessage, Message, TextMessage } from "@dytesdk/web-core";
import { DyteNewMessageEvent } from "./components/dyte-chat-composer-ui/dyte-chat-composer-ui";
import { NewMessageEvent } from "./components/dyte-chat-composer-view/dyte-chat-composer-view";
import { ChatGroup, ChatGroupChangedType } from "./components/dyte-chat-selector-ui/dyte-chat-selector-ui";
import { ControlBarVariant as ControlBarVariant1 } from "./components/dyte-controlbar-button/dyte-controlbar-button";
import { GridLayout, GridSize } from "./components/dyte-grid/dyte-grid";
import { GridPaginationVariants } from "./components/dyte-grid-pagination/dyte-grid-pagination";
import { IconVariant } from "./components/dyte-icon/dyte-icon";
import { ModalDataConfig } from "./components/dyte-join-stage/dyte-join-stage";
import { MeetingMode } from "./components/dyte-meeting/dyte-meeting";
import { GridLayout as GridLayout1, GridSize as GridSize1 } from "./components/dyte-grid/dyte-grid";
import { Placement } from "./types/floating-ui";
import { MessageAction } from "./components/dyte-message-view/dyte-message-view";
import { DyteNameTagVariant } from "./components/dyte-name-tag/dyte-name-tag";
import { VNode } from "@stencil/core";
import { DataNode } from "./components/dyte-paginated-list/dyte-paginated-list";
import { ParticipantViewMode } from "./components/dyte-participant/dyte-participant";
import { ParticipantsViewMode } from "./components/dyte-participants/dyte-participants";
import { DyteSidebarTab, DyteSidebarView } from "./components/dyte-sidebar-ui/dyte-sidebar-ui";
import { DyteSidebarSection } from "./components/dyte-sidebar/dyte-sidebar";
import { DyteSidebarTab as DyteSidebarTab1, DyteSidebarView as DyteSidebarView1 } from "./components/dyte-sidebar-ui/dyte-sidebar-ui";
import { Tab } from "./components/dyte-tab-bar/dyte-tab-bar";
import { TooltipKind, TooltipVariant } from "./components/dyte-tooltip/dyte-tooltip";
import { ViewerCountVariant } from "./components/dyte-viewer-count/dyte-viewer-count";
export namespace Components {
    interface DyteAi {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Default section
         */
        "defaultSection": AISection;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * View type
         */
        "view": AIView;
    }
    interface DyteAiChat {
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteAiHome {
        /**
          * Initial messages
         */
        "initialMessages": AIMessage[];
        /**
          * Meeting object
         */
        "meeting": Meeting;
    }
    interface DyteAiToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteAiTranscriptions {
        /**
          * Initial transcriptions
         */
        "initialTranscriptions": Transcript[];
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteAudioGrid {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Whether to hide self in the grid
         */
        "hideSelf": boolean;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States
         */
        "states": States1;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteAudioTile {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * States
         */
        "states": States1;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteAudioVisualizer {
        /**
          * Hide when there is no audio / audio is muted
         */
        "hideMuted": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Audio visualizer for screensharing, it will use screenShareTracks.audio instead of audioTrack
         */
        "isScreenShare": boolean;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": AudioVisualizerVariant;
    }
    interface DyteAvatar {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Participant object
         */
        "participant": Peer | WaitlistedParticipant | { name: string; picture: string };
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Avatar type
         */
        "variant": AvatarVariant;
    }
    interface DyteBreakoutRoomManager {
        /**
          * allow room delete
         */
        "allowDelete": boolean;
        /**
          * Enable updating participants
         */
        "assigningParticipants": boolean;
        /**
          * display expanded card by default
         */
        "defaultExpanded": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Drag mode
         */
        "isDragMode": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Mode in which selector is used
         */
        "mode": 'edit' | 'create';
        /**
          * Connected Room Config Object
         */
        "room": DraftMeeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteBreakoutRoomParticipants {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participant ids
         */
        "participantIds": string[];
        /**
          * selected participants
         */
        "selectedParticipantIds": string[];
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteBreakoutRoomsManager {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteBreakoutRoomsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteBroadcastMessageModal {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteButton {
        /**
          * Where the button is disabled or not
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Button type
         */
        "kind": ButtonKind;
        /**
          * Whether to reverse order of children
         */
        "reverse": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Button type
         */
        "type": HTMLButtonElement['type'];
        /**
          * Button variant
         */
        "variant": ButtonVariant;
    }
    interface DyteCameraSelector {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * variant
         */
        "variant": 'full' | 'inline';
    }
    interface DyteCameraToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteCaptionToggle {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteChannelCreator {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteChannelDetails {
        /**
          * Channel object
         */
        "channel": ChatChannel;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * List of channel members
         */
        "members": DyteBasicParticipant[];
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteChannelHeader {
        /**
          * Channel object
         */
        "channel": ChatChannel;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Show back button
         */
        "showBackButton": boolean;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteChannelSelectorUi {
        /**
          * Channels
         */
        "channels": ChatChannel[];
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Selected channel id
         */
        "selectedChannelId": string;
        /**
          * show recent message in channel
         */
        "showRecentMessage": boolean;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteChannelSelectorView {
        /**
          * Channels
         */
        "channels": {
    id: string;
    name: string;
    avatarUrl?: string;
    icon?: keyof IconPack1;
    latestMessage?: string;
    latestMessageTime?: Date;
    unreadCount?: number;
  }[];
        /**
          * Disables search bar (default = false)
         */
        "disableSearch": boolean;
        /**
          * Hides avatar (default = false)
         */
        "hideAvatar": boolean;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Selected channel id
         */
        "selectedChannelId": string;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * Render as dropdown or list (default = list)
         */
        "viewAs": 'dropdown' | 'list';
    }
    interface DyteChat {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * disables private chat
         */
        "disablePrivateChat": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * @deprecated Beta API, will change in future List of target presets allowed as private chat recipient
         */
        "privatePresetFilter": String[];
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteChatComposerUi {
        /**
          * Whether user can send file messages
         */
        "canSendFiles": boolean;
        /**
          * Whether user can send text messages
         */
        "canSendTextMessage": boolean;
        /**
          * channel id
         */
        "channelId"?: string;
        /**
          * Whether to show emoji picker
         */
        "disableEmojiPicker"?: boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * list of members that can be mentioned
         */
        "members"?: DyteBasicParticipant[];
        /**
          * prefill the composer
         */
        "prefill": {
    suggestedReplies?: string[];
    editMessage?: TextMessage;
    replyMessage?: TextMessage;
  };
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteChatComposerView {
        /**
          * Whether user can send file messages
         */
        "canSendFiles": boolean;
        /**
          * Whether user can send text messages
         */
        "canSendTextMessage": boolean;
        /**
          * Whether to show emoji picker
         */
        "disableEmojiPicker"?: boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Placeholder for text input
         */
        "inputTextPlaceholder": string;
        /**
          * Sets composer to edit mode
         */
        "isEditing": boolean;
        /**
          * Max length for text input
         */
        "maxLength": number;
        /**
          * Message to be pre-populated
         */
        "message": string;
        /**
          * Quote message to be displayed
         */
        "quotedMessage": string;
        /**
          * Rate limits
         */
        "rateLimits": { period: number; maxInvocations: number; };
        /**
          * Key for storing message in localStorage
         */
        "storageKey": string;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteChatMessage {
        /**
          * aligns message to right
         */
        "alignRight": boolean;
        /**
          * can delete message
         */
        "canDelete": boolean;
        /**
          * can edit message
         */
        "canEdit": boolean;
        /**
          * can pin this message
         */
        "canPin": boolean;
        /**
          * can quote reply this message
         */
        "canReply": boolean;
        /**
          * Child
         */
        "child": HTMLElement;
        /**
          * disables controls
         */
        "disableControls": boolean;
        /**
          * hides avatar
         */
        "hideAvatar": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * is continued
         */
        "isContinued": boolean;
        /**
          * if sender is self
         */
        "isSelf": boolean;
        /**
          * is unread
         */
        "isUnread": boolean;
        /**
          * Whether to left align the chat bubbles
         */
        "leftAlign": boolean;
        /**
          * message item
         */
        "message": Message;
        /**
          * sender display picture url
         */
        "senderDisplayPicture": string;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteChatMessagesUi {
        /**
          * Can current user pin/unpin messages
         */
        "canPinMessages": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Chat Messages
         */
        "messages": Chat[];
        /**
          * Selected group key
         */
        "selectedGroup": string;
        /**
          * User ID of self user
         */
        "selfUserId": string;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteChatMessagesUiPaginated {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether to align chat bubbles to the left
         */
        "leftAlign": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Selected channel
         */
        "selectedChannel"?: ChatChannel;
        /**
          * Selected channel id
         */
        "selectedChannelId"?: string;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteChatSearchResults {
        /**
          * Channel id
         */
        "channelId": string;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Search query
         */
        "query": string;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteChatSelectorUi {
        /**
          * Participants
         */
        "groups": ChatGroup[];
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Selected participant
         */
        "selectedGroupId": string;
        /**
          * Self User ID
         */
        "selfUserId": string;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Unread counts
         */
        "unreadCounts": Record<string, number>;
    }
    interface DyteChatToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteClock {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteConfirmationModal {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteControlbar {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Whether to render the default UI
         */
        "disableRender": boolean;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'boxed';
    }
    interface DyteControlbarButton {
        /**
          * Whether icon requires brand color
         */
        "brandIcon": boolean;
        /**
          * Whether button is disabled
         */
        "disabled": boolean;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Loading state Ignores current icon and shows a spinner if true
         */
        "isLoading": boolean;
        /**
          * Label of button
         */
        "label": string;
        /**
          * Whether to show warning icon
         */
        "showWarning": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteCounter {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Minimum value
         */
        "minValue": number;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Initial value
         */
        "value": number;
    }
    interface DyteDialog {
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Whether Escape key can close the modal
         */
        "disableEscapeKey": boolean;
        /**
          * Whether to show the close button
         */
        "hideCloseButton": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Whether a dialog is open or not
         */
        "open": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteDialogManager {
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteDraftAttachmentView {
        /**
          * Attachment to display
         */
        "attachment": {
    type: 'image' | 'file';
    file: File;
  };
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteEmojiPicker {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteEmojiPickerButton {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Active state indicator
         */
        "isActive": boolean;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteEndedScreen {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Global states
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Global states
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteFileDropzone {
        /**
          * Host element on which drop events to attach
         */
        "hostEl": HTMLElement;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteFileMessage {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued": boolean;
        /**
          * Text message object
         */
        "message": FileMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now": Date;
        /**
          * show message in bubble
         */
        "showBubble": boolean;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteFileMessageView {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Name of the file
         */
        "name": string;
        /**
          * Size of the file
         */
        "size": number;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * Url of the file
         */
        "url": string;
    }
    interface DyteFilePickerButton {
        /**
          * File type filter to open file picker with
         */
        "filter": string;
        /**
          * Icon
         */
        "icon": keyof IconPack1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Label for tooltip
         */
        "label": string;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteFullscreenToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Target Element to fullscreen
         */
        "targetElement": HTMLElement;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteGrid {
        /**
          * The aspect ratio of each participant
         */
        "aspectRatio": string;
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Gap between participants
         */
        "gap": number;
        /**
          * Grid size
         */
        "gridSize": GridSize;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Grid Layout
         */
        "layout": GridLayout;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * @deprecated
         */
        "overrides": any;
        /**
          * Size
         */
        "size": Size;
        /**
          * States
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteGridPagination {
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size Prop
         */
        "size": Size;
        /**
          * States
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": GridPaginationVariants;
    }
    interface DyteHeader {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Whether to render the default UI
         */
        "disableRender": boolean;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'boxed';
    }
    interface DyteIcon {
        /**
          * Icon
         */
        "icon": string;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Icon variant
         */
        "variant": IconVariant;
    }
    interface DyteIdleScreen {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteImageMessage {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued": boolean;
        /**
          * Text message object
         */
        "message": ImageMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now": Date;
        /**
          * show message in bubble
         */
        "showBubble": boolean;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteImageMessageView {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * Url of the image
         */
        "url": string;
    }
    interface DyteImageViewer {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Image message
         */
        "image": ImageMessage;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteInformationTooltip {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
    }
    interface DyteJoinStage {
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Content Config
         */
        "dataConfig": ModalDataConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteLeaveButton {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteLeaveMeeting {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteLivestreamIndicator {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteLivestreamPlayer {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteLivestreamToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteLogo {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Logo URL
         */
        "logoUrl": string;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteMarkdownView {
        /**
          * max length of text to render as markdown
         */
        "maxLength": number;
        /**
          * raw text to render as markdown
         */
        "text": string;
    }
    interface DyteMeeting {
        /**
          * Whether to apply the design system on the document root from config
         */
        "applyDesignSystem": boolean;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Grid layout
         */
        "gridLayout": GridLayout1;
        /**
          * Icon Pack URL
         */
        "iconPackUrl": string;
        /**
          * Whether participant should leave when this component gets unmounted
         */
        "leaveOnUnmount": boolean;
        /**
          * Whether to load config from preset
         */
        "loadConfigFromPreset": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Fill type
         */
        "mode": MeetingMode;
        /**
          * Whether to show setup screen or not
         */
        "showSetupScreen": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteMeetingTitle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteMenu {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Offset in px
         */
        "offset": number;
        /**
          * Placement of menu
         */
        "placement": Placement;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteMenuItem {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteMenuList {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteMessageListView {
        /**
          * Estimated height of an item
         */
        "estimateItemSize": number;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Function to load more messages. Messages returned from this will be preprended
         */
        "loadMore": (lastMessage: Message) => Promise<Message[]>;
        /**
          * Messages to render
         */
        "messages": Message[];
        /**
          * Render function of the message
         */
        "renderer": (message: Message, index: number) => HTMLElement;
        /**
          * Maximum visible messages
         */
        "visibleItemsCount": number;
    }
    interface DyteMessageView {
        /**
          * List of actions to show in menu
         */
        "actions": MessageAction[];
        /**
          * Author display label
         */
        "authorName": string;
        /**
          * Avatar image url
         */
        "avatarUrl": string;
        /**
          * Hides author display label
         */
        "hideAuthorName": boolean;
        /**
          * Hides avatar
         */
        "hideAvatar": boolean;
        /**
          * Hides metadata (time)
         */
        "hideMetadata": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Time when message was sent
         */
        "time": Date;
        /**
          * Appearance
         */
        "variant": 'plain' | 'bubble';
        /**
          * Render
         */
        "viewType": 'incoming' | 'outgoing';
    }
    interface DyteMicToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteMicrophoneSelector {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * variant
         */
        "variant": 'full' | 'inline';
    }
    interface DyteMixedGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio": string;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap": number;
        /**
          * Grid size
         */
        "gridSize": GridSize1;
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Grid Layout
         */
        "layout": GridLayout1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participants
         */
        "participants": Peer[];
        /**
          * Pinned Participants
         */
        "pinnedParticipants": Peer[];
        /**
          * Active Plugins
         */
        "plugins": DytePlugin[];
        /**
          * Screenshare Participants
         */
        "screenShareParticipants": Peer[];
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteMoreToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteMuteAllButton {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteMuteAllConfirmation {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteNameTag {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether it is used in a screen share view
         */
        "isScreenShare": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Name tag variant
         */
        "variant": DyteNameTagVariant;
    }
    interface DyteNetworkIndicator {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Is for screenshare
         */
        "isScreenShare": boolean;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Participant or Self
         */
        "participant": Peer;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteNotification {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Message
         */
        "notification": Notification;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteNotifications {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteOverlayModal {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DytePaginatedList {
        /**
          * auto scroll list to bottom
         */
        "autoScroll": boolean;
        /**
          * Create nodes
         */
        "createNodes": (data: unknown[]) => VNode[];
        /**
          * label to show when empty
         */
        "emptyListLabel": string;
        /**
          * Fetch the data
         */
        "fetchData": (timestamp: number, size: number, reversed: boolean) => Promise<unknown[]>;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * On a new node created
         */
        "onNewNode": (node: DataNode) => Promise<void>;
        /**
          * On node deleted
         */
        "onNodeDelete": (key: string) => Promise<void>;
        /**
          * On node updated
         */
        "onNodeUpdate": (key: string, newItem: DataNode) => Promise<void>;
        /**
          * Page Size
         */
        "pageSize": number;
        /**
          * Number of pages allowed to be shown
         */
        "pagesAllowed": number;
        /**
          * Item id
         */
        "selectedItemId"?: string;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteParticipant {
        /**
          * Config object
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Show participant summary
         */
        "view": ParticipantViewMode;
    }
    interface DyteParticipantCount {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteParticipantSetup {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether tile is used for preview
         */
        "isPreview": boolean;
        /**
          * Position of name tag
         */
        "nameTagPosition": | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'gradient';
    }
    interface DyteParticipantTile {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether tile is used for preview
         */
        "isPreview": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Position of name tag
         */
        "nameTagPosition": | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'gradient';
    }
    interface DyteParticipants {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteParticipantsAudio {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteParticipantsStageList {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Search
         */
        "search": string;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * View mode for participants list
         */
        "view": ParticipantsViewMode;
    }
    interface DyteParticipantsStageQueue {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * View mode for participants list
         */
        "view": ParticipantsViewMode;
    }
    interface DyteParticipantsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteParticipantsViewerList {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Search
         */
        "search": string;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * View mode for participants list
         */
        "view": ParticipantsViewMode;
    }
    interface DyteParticipantsWaitingList {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * View mode for participants list
         */
        "view": ParticipantsViewMode;
    }
    interface DytePermissionsMessage {
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DytePipToggle {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DytePluginMain {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Plugin
         */
        "plugin": DytePlugin;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DytePlugins {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DytePluginsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DytePoll {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Permissions Object
         */
        "permissions": DytePermissionsPreset;
        /**
          * Poll
         */
        "poll": Poll;
        /**
          * Self ID
         */
        "self": string;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DytePollForm {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DytePolls {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DytePollsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteRecordingIndicator {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteRecordingToggle {
        /**
          * Disable the button
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteScreenShareToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteScreenshareView {
        /**
          * Hide full screen button
         */
        "hideFullScreenButton": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Position of name tag
         */
        "nameTagPosition": | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'gradient';
    }
    interface DyteSettings {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteSettingsAudio {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteSettingsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteSettingsVideo {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteSetupScreen {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteSidebar {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Default section
         */
        "defaultSection": DyteSidebarSection;
        /**
          * Enabled sections in sidebar
         */
        "enabledSections": DyteSidebarTab[];
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * View type
         */
        "view": DyteSidebarView;
    }
    interface DyteSidebarUi {
        /**
          * Default tab to open
         */
        "currentTab": string;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * Tabs
         */
        "tabs": DyteSidebarTab[];
        /**
          * View
         */
        "view": DyteSidebarView;
    }
    interface DyteSimpleGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio": string;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap": number;
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participants
         */
        "participants": Peer[];
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteSpeakerSelector {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * variant
         */
        "variant": 'full' | 'inline';
    }
    interface DyteSpinner {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteSpotlightGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio": string;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap": number;
        /**
          * Grid size
         */
        "gridSize": GridSize1;
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Grid Layout
         */
        "layout": GridLayout1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participants
         */
        "participants": Peer[];
        /**
          * Pinned Participants
         */
        "pinnedParticipants": Peer[];
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteSpotlightIndicator {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteStage {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteStageToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface DyteSwitch {
        /**
          * Whether the switch is enabled/checked
         */
        "checked": boolean;
        /**
          * Whether switch is readonly
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether switch is readonly
         */
        "readonly": boolean;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteTabBar {
        /**
          * Active tab
         */
        "activeTab": Tab;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Grid Layout
         */
        "layout": GridLayout1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Tabs
         */
        "tabs": Tab[];
    }
    interface DyteTextComposerView {
        /**
          * Disable the text input (default = false)
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Keydown event handler function
         */
        "keyDownHandler": (e: KeyboardEvent) => void;
        /**
          * Max length for text input
         */
        "maxLength": number;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Boolean to indicate if rate limit is breached
         */
        "rateLimitBreached": boolean;
        /**
          * Sets value of the text input
         */
        "setText": (text: string, focus?: boolean) => Promise<void>;
        /**
          * Language
         */
        "t": DyteI18n1;
        /**
          * Default value for text input
         */
        "value": string;
    }
    interface DyteTextField {
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Input type
         */
        "type": string;
    }
    interface DyteTextMessage {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued": boolean;
        /**
          * Text message object
         */
        "message": TextMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now": Date;
        /**
          * show message in bubble
         */
        "showBubble": boolean;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteTextMessageView {
        /**
          * Renders text as markdown (default = true)
         */
        "isMarkdown": boolean;
        /**
          * Text message
         */
        "text": string;
    }
    interface DyteTooltip {
        /**
          * Delay before showing the tooltip
         */
        "delay": number;
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Tooltip kind
         */
        "kind": TooltipKind;
        /**
          * Tooltip label
         */
        "label": string;
        /**
          * Open
         */
        "open": boolean;
        /**
          * Placement of menu
         */
        "placement": Placement;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Tooltip variant
         */
        "variant": TooltipVariant;
    }
    interface DyteTranscript {
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Message
         */
        "transcript": Transcript & { renderedId?: string };
    }
    interface DyteTranscripts {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": DyteI18n;
    }
    interface DyteUiProvider {
        /**
          * Whether to apply the design system on the document root from config
         */
        "applyDesignSystem": boolean;
        /**
          * UI Config
         */
        "config": UIConfig1;
        /**
          * Icon Pack URL
         */
        "iconPackUrl": string;
        /**
          * Whether to join the meeting room
         */
        "joinRoom": boolean;
        /**
          * Whether to load config from preset
         */
        "loadConfigFromPreset": boolean;
        /**
          * dyte meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": DyteI18n1;
    }
    interface DyteViewerCount {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n;
        /**
          * Viewer count variant
         */
        "variant": ViewerCountVariant;
    }
    interface DyteWaitingScreen {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": DyteI18n;
    }
}
export interface DyteAiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteAiElement;
}
export interface DyteAiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteAiToggleElement;
}
export interface DyteBreakoutRoomManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteBreakoutRoomManagerElement;
}
export interface DyteBreakoutRoomParticipantsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteBreakoutRoomParticipantsElement;
}
export interface DyteBreakoutRoomsManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteBreakoutRoomsManagerElement;
}
export interface DyteBreakoutRoomsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteBreakoutRoomsToggleElement;
}
export interface DyteBroadcastMessageModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteBroadcastMessageModalElement;
}
export interface DyteCameraToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteCameraToggleElement;
}
export interface DyteCaptionToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteCaptionToggleElement;
}
export interface DyteChannelCreatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChannelCreatorElement;
}
export interface DyteChannelHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChannelHeaderElement;
}
export interface DyteChannelSelectorUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChannelSelectorUiElement;
}
export interface DyteChannelSelectorViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChannelSelectorViewElement;
}
export interface DyteChatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChatElement;
}
export interface DyteChatComposerUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChatComposerUiElement;
}
export interface DyteChatComposerViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChatComposerViewElement;
}
export interface DyteChatMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChatMessageElement;
}
export interface DyteChatMessagesUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChatMessagesUiElement;
}
export interface DyteChatMessagesUiPaginatedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChatMessagesUiPaginatedElement;
}
export interface DyteChatSelectorUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChatSelectorUiElement;
}
export interface DyteChatToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteChatToggleElement;
}
export interface DyteConfirmationModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteConfirmationModalElement;
}
export interface DyteCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteCounterElement;
}
export interface DyteDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteDialogElement;
}
export interface DyteDialogManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteDialogManagerElement;
}
export interface DyteDraftAttachmentViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteDraftAttachmentViewElement;
}
export interface DyteEmojiPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteEmojiPickerElement;
}
export interface DyteFileDropzoneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteFileDropzoneElement;
}
export interface DyteFilePickerButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteFilePickerButtonElement;
}
export interface DyteFullscreenToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteFullscreenToggleElement;
}
export interface DyteGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteGridElement;
}
export interface DyteImageMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteImageMessageElement;
}
export interface DyteImageMessageViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteImageMessageViewElement;
}
export interface DyteImageViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteImageViewerElement;
}
export interface DyteJoinStageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteJoinStageElement;
}
export interface DyteLeaveButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteLeaveButtonElement;
}
export interface DyteLeaveMeetingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteLeaveMeetingElement;
}
export interface DyteLivestreamPlayerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteLivestreamPlayerElement;
}
export interface DyteLivestreamToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteLivestreamToggleElement;
}
export interface DyteMeetingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteMeetingElement;
}
export interface DyteMessageViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteMessageViewElement;
}
export interface DyteMicToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteMicToggleElement;
}
export interface DyteMoreToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteMoreToggleElement;
}
export interface DyteMuteAllButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteMuteAllButtonElement;
}
export interface DyteMuteAllConfirmationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteMuteAllConfirmationElement;
}
export interface DyteNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteNotificationElement;
}
export interface DyteOverlayModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteOverlayModalElement;
}
export interface DyteParticipantCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteParticipantElement;
}
export interface DyteParticipantTileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteParticipantTileElement;
}
export interface DyteParticipantsAudioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteParticipantsAudioElement;
}
export interface DyteParticipantsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteParticipantsToggleElement;
}
export interface DytePermissionsMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDytePermissionsMessageElement;
}
export interface DytePipToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDytePipToggleElement;
}
export interface DytePluginsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDytePluginsElement;
}
export interface DytePluginsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDytePluginsToggleElement;
}
export interface DytePollCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDytePollElement;
}
export interface DytePollFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDytePollFormElement;
}
export interface DytePollsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDytePollsToggleElement;
}
export interface DyteRecordingToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteRecordingToggleElement;
}
export interface DyteScreenShareToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteScreenShareToggleElement;
}
export interface DyteScreenshareViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteScreenshareViewElement;
}
export interface DyteSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteSettingsElement;
}
export interface DyteSettingsAudioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteSettingsAudioElement;
}
export interface DyteSettingsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteSettingsToggleElement;
}
export interface DyteSettingsVideoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteSettingsVideoElement;
}
export interface DyteSetupScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteSetupScreenElement;
}
export interface DyteSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteSidebarElement;
}
export interface DyteSidebarUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteSidebarUiElement;
}
export interface DyteStageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteStageElement;
}
export interface DyteStageToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteStageToggleElement;
}
export interface DyteSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteSwitchElement;
}
export interface DyteTabBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteTabBarElement;
}
export interface DyteTextComposerViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteTextComposerViewElement;
}
export interface DyteTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteTextFieldElement;
}
export interface DyteTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteTooltipElement;
}
export interface DyteTranscriptCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDyteTranscriptElement;
}
declare global {
    interface HTMLDyteAiElement extends Components.DyteAi, HTMLStencilElement {
    }
    var HTMLDyteAiElement: {
        prototype: HTMLDyteAiElement;
        new (): HTMLDyteAiElement;
    };
    interface HTMLDyteAiChatElement extends Components.DyteAiChat, HTMLStencilElement {
    }
    var HTMLDyteAiChatElement: {
        prototype: HTMLDyteAiChatElement;
        new (): HTMLDyteAiChatElement;
    };
    interface HTMLDyteAiHomeElement extends Components.DyteAiHome, HTMLStencilElement {
    }
    var HTMLDyteAiHomeElement: {
        prototype: HTMLDyteAiHomeElement;
        new (): HTMLDyteAiHomeElement;
    };
    interface HTMLDyteAiToggleElement extends Components.DyteAiToggle, HTMLStencilElement {
    }
    var HTMLDyteAiToggleElement: {
        prototype: HTMLDyteAiToggleElement;
        new (): HTMLDyteAiToggleElement;
    };
    interface HTMLDyteAiTranscriptionsElement extends Components.DyteAiTranscriptions, HTMLStencilElement {
    }
    var HTMLDyteAiTranscriptionsElement: {
        prototype: HTMLDyteAiTranscriptionsElement;
        new (): HTMLDyteAiTranscriptionsElement;
    };
    interface HTMLDyteAudioGridElement extends Components.DyteAudioGrid, HTMLStencilElement {
    }
    var HTMLDyteAudioGridElement: {
        prototype: HTMLDyteAudioGridElement;
        new (): HTMLDyteAudioGridElement;
    };
    interface HTMLDyteAudioTileElement extends Components.DyteAudioTile, HTMLStencilElement {
    }
    var HTMLDyteAudioTileElement: {
        prototype: HTMLDyteAudioTileElement;
        new (): HTMLDyteAudioTileElement;
    };
    interface HTMLDyteAudioVisualizerElement extends Components.DyteAudioVisualizer, HTMLStencilElement {
    }
    var HTMLDyteAudioVisualizerElement: {
        prototype: HTMLDyteAudioVisualizerElement;
        new (): HTMLDyteAudioVisualizerElement;
    };
    interface HTMLDyteAvatarElement extends Components.DyteAvatar, HTMLStencilElement {
    }
    var HTMLDyteAvatarElement: {
        prototype: HTMLDyteAvatarElement;
        new (): HTMLDyteAvatarElement;
    };
    interface HTMLDyteBreakoutRoomManagerElement extends Components.DyteBreakoutRoomManager, HTMLStencilElement {
    }
    var HTMLDyteBreakoutRoomManagerElement: {
        prototype: HTMLDyteBreakoutRoomManagerElement;
        new (): HTMLDyteBreakoutRoomManagerElement;
    };
    interface HTMLDyteBreakoutRoomParticipantsElement extends Components.DyteBreakoutRoomParticipants, HTMLStencilElement {
    }
    var HTMLDyteBreakoutRoomParticipantsElement: {
        prototype: HTMLDyteBreakoutRoomParticipantsElement;
        new (): HTMLDyteBreakoutRoomParticipantsElement;
    };
    interface HTMLDyteBreakoutRoomsManagerElement extends Components.DyteBreakoutRoomsManager, HTMLStencilElement {
    }
    var HTMLDyteBreakoutRoomsManagerElement: {
        prototype: HTMLDyteBreakoutRoomsManagerElement;
        new (): HTMLDyteBreakoutRoomsManagerElement;
    };
    interface HTMLDyteBreakoutRoomsToggleElement extends Components.DyteBreakoutRoomsToggle, HTMLStencilElement {
    }
    var HTMLDyteBreakoutRoomsToggleElement: {
        prototype: HTMLDyteBreakoutRoomsToggleElement;
        new (): HTMLDyteBreakoutRoomsToggleElement;
    };
    interface HTMLDyteBroadcastMessageModalElement extends Components.DyteBroadcastMessageModal, HTMLStencilElement {
    }
    var HTMLDyteBroadcastMessageModalElement: {
        prototype: HTMLDyteBroadcastMessageModalElement;
        new (): HTMLDyteBroadcastMessageModalElement;
    };
    interface HTMLDyteButtonElement extends Components.DyteButton, HTMLStencilElement {
    }
    var HTMLDyteButtonElement: {
        prototype: HTMLDyteButtonElement;
        new (): HTMLDyteButtonElement;
    };
    interface HTMLDyteCameraSelectorElement extends Components.DyteCameraSelector, HTMLStencilElement {
    }
    var HTMLDyteCameraSelectorElement: {
        prototype: HTMLDyteCameraSelectorElement;
        new (): HTMLDyteCameraSelectorElement;
    };
    interface HTMLDyteCameraToggleElement extends Components.DyteCameraToggle, HTMLStencilElement {
    }
    var HTMLDyteCameraToggleElement: {
        prototype: HTMLDyteCameraToggleElement;
        new (): HTMLDyteCameraToggleElement;
    };
    interface HTMLDyteCaptionToggleElement extends Components.DyteCaptionToggle, HTMLStencilElement {
    }
    var HTMLDyteCaptionToggleElement: {
        prototype: HTMLDyteCaptionToggleElement;
        new (): HTMLDyteCaptionToggleElement;
    };
    interface HTMLDyteChannelCreatorElement extends Components.DyteChannelCreator, HTMLStencilElement {
    }
    var HTMLDyteChannelCreatorElement: {
        prototype: HTMLDyteChannelCreatorElement;
        new (): HTMLDyteChannelCreatorElement;
    };
    interface HTMLDyteChannelDetailsElement extends Components.DyteChannelDetails, HTMLStencilElement {
    }
    var HTMLDyteChannelDetailsElement: {
        prototype: HTMLDyteChannelDetailsElement;
        new (): HTMLDyteChannelDetailsElement;
    };
    interface HTMLDyteChannelHeaderElement extends Components.DyteChannelHeader, HTMLStencilElement {
    }
    var HTMLDyteChannelHeaderElement: {
        prototype: HTMLDyteChannelHeaderElement;
        new (): HTMLDyteChannelHeaderElement;
    };
    interface HTMLDyteChannelSelectorUiElement extends Components.DyteChannelSelectorUi, HTMLStencilElement {
    }
    var HTMLDyteChannelSelectorUiElement: {
        prototype: HTMLDyteChannelSelectorUiElement;
        new (): HTMLDyteChannelSelectorUiElement;
    };
    interface HTMLDyteChannelSelectorViewElement extends Components.DyteChannelSelectorView, HTMLStencilElement {
    }
    var HTMLDyteChannelSelectorViewElement: {
        prototype: HTMLDyteChannelSelectorViewElement;
        new (): HTMLDyteChannelSelectorViewElement;
    };
    interface HTMLDyteChatElement extends Components.DyteChat, HTMLStencilElement {
    }
    var HTMLDyteChatElement: {
        prototype: HTMLDyteChatElement;
        new (): HTMLDyteChatElement;
    };
    interface HTMLDyteChatComposerUiElement extends Components.DyteChatComposerUi, HTMLStencilElement {
    }
    var HTMLDyteChatComposerUiElement: {
        prototype: HTMLDyteChatComposerUiElement;
        new (): HTMLDyteChatComposerUiElement;
    };
    interface HTMLDyteChatComposerViewElement extends Components.DyteChatComposerView, HTMLStencilElement {
    }
    var HTMLDyteChatComposerViewElement: {
        prototype: HTMLDyteChatComposerViewElement;
        new (): HTMLDyteChatComposerViewElement;
    };
    interface HTMLDyteChatMessageElement extends Components.DyteChatMessage, HTMLStencilElement {
    }
    var HTMLDyteChatMessageElement: {
        prototype: HTMLDyteChatMessageElement;
        new (): HTMLDyteChatMessageElement;
    };
    interface HTMLDyteChatMessagesUiElement extends Components.DyteChatMessagesUi, HTMLStencilElement {
    }
    var HTMLDyteChatMessagesUiElement: {
        prototype: HTMLDyteChatMessagesUiElement;
        new (): HTMLDyteChatMessagesUiElement;
    };
    interface HTMLDyteChatMessagesUiPaginatedElement extends Components.DyteChatMessagesUiPaginated, HTMLStencilElement {
    }
    var HTMLDyteChatMessagesUiPaginatedElement: {
        prototype: HTMLDyteChatMessagesUiPaginatedElement;
        new (): HTMLDyteChatMessagesUiPaginatedElement;
    };
    interface HTMLDyteChatSearchResultsElement extends Components.DyteChatSearchResults, HTMLStencilElement {
    }
    var HTMLDyteChatSearchResultsElement: {
        prototype: HTMLDyteChatSearchResultsElement;
        new (): HTMLDyteChatSearchResultsElement;
    };
    interface HTMLDyteChatSelectorUiElement extends Components.DyteChatSelectorUi, HTMLStencilElement {
    }
    var HTMLDyteChatSelectorUiElement: {
        prototype: HTMLDyteChatSelectorUiElement;
        new (): HTMLDyteChatSelectorUiElement;
    };
    interface HTMLDyteChatToggleElement extends Components.DyteChatToggle, HTMLStencilElement {
    }
    var HTMLDyteChatToggleElement: {
        prototype: HTMLDyteChatToggleElement;
        new (): HTMLDyteChatToggleElement;
    };
    interface HTMLDyteClockElement extends Components.DyteClock, HTMLStencilElement {
    }
    var HTMLDyteClockElement: {
        prototype: HTMLDyteClockElement;
        new (): HTMLDyteClockElement;
    };
    interface HTMLDyteConfirmationModalElement extends Components.DyteConfirmationModal, HTMLStencilElement {
    }
    var HTMLDyteConfirmationModalElement: {
        prototype: HTMLDyteConfirmationModalElement;
        new (): HTMLDyteConfirmationModalElement;
    };
    interface HTMLDyteControlbarElement extends Components.DyteControlbar, HTMLStencilElement {
    }
    var HTMLDyteControlbarElement: {
        prototype: HTMLDyteControlbarElement;
        new (): HTMLDyteControlbarElement;
    };
    interface HTMLDyteControlbarButtonElement extends Components.DyteControlbarButton, HTMLStencilElement {
    }
    var HTMLDyteControlbarButtonElement: {
        prototype: HTMLDyteControlbarButtonElement;
        new (): HTMLDyteControlbarButtonElement;
    };
    interface HTMLDyteCounterElement extends Components.DyteCounter, HTMLStencilElement {
    }
    var HTMLDyteCounterElement: {
        prototype: HTMLDyteCounterElement;
        new (): HTMLDyteCounterElement;
    };
    interface HTMLDyteDialogElement extends Components.DyteDialog, HTMLStencilElement {
    }
    var HTMLDyteDialogElement: {
        prototype: HTMLDyteDialogElement;
        new (): HTMLDyteDialogElement;
    };
    interface HTMLDyteDialogManagerElement extends Components.DyteDialogManager, HTMLStencilElement {
    }
    var HTMLDyteDialogManagerElement: {
        prototype: HTMLDyteDialogManagerElement;
        new (): HTMLDyteDialogManagerElement;
    };
    interface HTMLDyteDraftAttachmentViewElement extends Components.DyteDraftAttachmentView, HTMLStencilElement {
    }
    var HTMLDyteDraftAttachmentViewElement: {
        prototype: HTMLDyteDraftAttachmentViewElement;
        new (): HTMLDyteDraftAttachmentViewElement;
    };
    interface HTMLDyteEmojiPickerElement extends Components.DyteEmojiPicker, HTMLStencilElement {
    }
    var HTMLDyteEmojiPickerElement: {
        prototype: HTMLDyteEmojiPickerElement;
        new (): HTMLDyteEmojiPickerElement;
    };
    interface HTMLDyteEmojiPickerButtonElement extends Components.DyteEmojiPickerButton, HTMLStencilElement {
    }
    var HTMLDyteEmojiPickerButtonElement: {
        prototype: HTMLDyteEmojiPickerButtonElement;
        new (): HTMLDyteEmojiPickerButtonElement;
    };
    interface HTMLDyteEndedScreenElement extends Components.DyteEndedScreen, HTMLStencilElement {
    }
    var HTMLDyteEndedScreenElement: {
        prototype: HTMLDyteEndedScreenElement;
        new (): HTMLDyteEndedScreenElement;
    };
    interface HTMLDyteFileDropzoneElement extends Components.DyteFileDropzone, HTMLStencilElement {
    }
    var HTMLDyteFileDropzoneElement: {
        prototype: HTMLDyteFileDropzoneElement;
        new (): HTMLDyteFileDropzoneElement;
    };
    interface HTMLDyteFileMessageElement extends Components.DyteFileMessage, HTMLStencilElement {
    }
    var HTMLDyteFileMessageElement: {
        prototype: HTMLDyteFileMessageElement;
        new (): HTMLDyteFileMessageElement;
    };
    interface HTMLDyteFileMessageViewElement extends Components.DyteFileMessageView, HTMLStencilElement {
    }
    var HTMLDyteFileMessageViewElement: {
        prototype: HTMLDyteFileMessageViewElement;
        new (): HTMLDyteFileMessageViewElement;
    };
    interface HTMLDyteFilePickerButtonElement extends Components.DyteFilePickerButton, HTMLStencilElement {
    }
    var HTMLDyteFilePickerButtonElement: {
        prototype: HTMLDyteFilePickerButtonElement;
        new (): HTMLDyteFilePickerButtonElement;
    };
    interface HTMLDyteFullscreenToggleElement extends Components.DyteFullscreenToggle, HTMLStencilElement {
    }
    var HTMLDyteFullscreenToggleElement: {
        prototype: HTMLDyteFullscreenToggleElement;
        new (): HTMLDyteFullscreenToggleElement;
    };
    interface HTMLDyteGridElement extends Components.DyteGrid, HTMLStencilElement {
    }
    var HTMLDyteGridElement: {
        prototype: HTMLDyteGridElement;
        new (): HTMLDyteGridElement;
    };
    interface HTMLDyteGridPaginationElement extends Components.DyteGridPagination, HTMLStencilElement {
    }
    var HTMLDyteGridPaginationElement: {
        prototype: HTMLDyteGridPaginationElement;
        new (): HTMLDyteGridPaginationElement;
    };
    interface HTMLDyteHeaderElement extends Components.DyteHeader, HTMLStencilElement {
    }
    var HTMLDyteHeaderElement: {
        prototype: HTMLDyteHeaderElement;
        new (): HTMLDyteHeaderElement;
    };
    interface HTMLDyteIconElement extends Components.DyteIcon, HTMLStencilElement {
    }
    var HTMLDyteIconElement: {
        prototype: HTMLDyteIconElement;
        new (): HTMLDyteIconElement;
    };
    interface HTMLDyteIdleScreenElement extends Components.DyteIdleScreen, HTMLStencilElement {
    }
    var HTMLDyteIdleScreenElement: {
        prototype: HTMLDyteIdleScreenElement;
        new (): HTMLDyteIdleScreenElement;
    };
    interface HTMLDyteImageMessageElement extends Components.DyteImageMessage, HTMLStencilElement {
    }
    var HTMLDyteImageMessageElement: {
        prototype: HTMLDyteImageMessageElement;
        new (): HTMLDyteImageMessageElement;
    };
    interface HTMLDyteImageMessageViewElement extends Components.DyteImageMessageView, HTMLStencilElement {
    }
    var HTMLDyteImageMessageViewElement: {
        prototype: HTMLDyteImageMessageViewElement;
        new (): HTMLDyteImageMessageViewElement;
    };
    interface HTMLDyteImageViewerElement extends Components.DyteImageViewer, HTMLStencilElement {
    }
    var HTMLDyteImageViewerElement: {
        prototype: HTMLDyteImageViewerElement;
        new (): HTMLDyteImageViewerElement;
    };
    interface HTMLDyteInformationTooltipElement extends Components.DyteInformationTooltip, HTMLStencilElement {
    }
    var HTMLDyteInformationTooltipElement: {
        prototype: HTMLDyteInformationTooltipElement;
        new (): HTMLDyteInformationTooltipElement;
    };
    interface HTMLDyteJoinStageElement extends Components.DyteJoinStage, HTMLStencilElement {
    }
    var HTMLDyteJoinStageElement: {
        prototype: HTMLDyteJoinStageElement;
        new (): HTMLDyteJoinStageElement;
    };
    interface HTMLDyteLeaveButtonElement extends Components.DyteLeaveButton, HTMLStencilElement {
    }
    var HTMLDyteLeaveButtonElement: {
        prototype: HTMLDyteLeaveButtonElement;
        new (): HTMLDyteLeaveButtonElement;
    };
    interface HTMLDyteLeaveMeetingElement extends Components.DyteLeaveMeeting, HTMLStencilElement {
    }
    var HTMLDyteLeaveMeetingElement: {
        prototype: HTMLDyteLeaveMeetingElement;
        new (): HTMLDyteLeaveMeetingElement;
    };
    interface HTMLDyteLivestreamIndicatorElement extends Components.DyteLivestreamIndicator, HTMLStencilElement {
    }
    var HTMLDyteLivestreamIndicatorElement: {
        prototype: HTMLDyteLivestreamIndicatorElement;
        new (): HTMLDyteLivestreamIndicatorElement;
    };
    interface HTMLDyteLivestreamPlayerElement extends Components.DyteLivestreamPlayer, HTMLStencilElement {
    }
    var HTMLDyteLivestreamPlayerElement: {
        prototype: HTMLDyteLivestreamPlayerElement;
        new (): HTMLDyteLivestreamPlayerElement;
    };
    interface HTMLDyteLivestreamToggleElement extends Components.DyteLivestreamToggle, HTMLStencilElement {
    }
    var HTMLDyteLivestreamToggleElement: {
        prototype: HTMLDyteLivestreamToggleElement;
        new (): HTMLDyteLivestreamToggleElement;
    };
    interface HTMLDyteLogoElement extends Components.DyteLogo, HTMLStencilElement {
    }
    var HTMLDyteLogoElement: {
        prototype: HTMLDyteLogoElement;
        new (): HTMLDyteLogoElement;
    };
    interface HTMLDyteMarkdownViewElement extends Components.DyteMarkdownView, HTMLStencilElement {
    }
    var HTMLDyteMarkdownViewElement: {
        prototype: HTMLDyteMarkdownViewElement;
        new (): HTMLDyteMarkdownViewElement;
    };
    interface HTMLDyteMeetingElement extends Components.DyteMeeting, HTMLStencilElement {
    }
    var HTMLDyteMeetingElement: {
        prototype: HTMLDyteMeetingElement;
        new (): HTMLDyteMeetingElement;
    };
    interface HTMLDyteMeetingTitleElement extends Components.DyteMeetingTitle, HTMLStencilElement {
    }
    var HTMLDyteMeetingTitleElement: {
        prototype: HTMLDyteMeetingTitleElement;
        new (): HTMLDyteMeetingTitleElement;
    };
    interface HTMLDyteMenuElement extends Components.DyteMenu, HTMLStencilElement {
    }
    var HTMLDyteMenuElement: {
        prototype: HTMLDyteMenuElement;
        new (): HTMLDyteMenuElement;
    };
    interface HTMLDyteMenuItemElement extends Components.DyteMenuItem, HTMLStencilElement {
    }
    var HTMLDyteMenuItemElement: {
        prototype: HTMLDyteMenuItemElement;
        new (): HTMLDyteMenuItemElement;
    };
    interface HTMLDyteMenuListElement extends Components.DyteMenuList, HTMLStencilElement {
    }
    var HTMLDyteMenuListElement: {
        prototype: HTMLDyteMenuListElement;
        new (): HTMLDyteMenuListElement;
    };
    interface HTMLDyteMessageListViewElement extends Components.DyteMessageListView, HTMLStencilElement {
    }
    var HTMLDyteMessageListViewElement: {
        prototype: HTMLDyteMessageListViewElement;
        new (): HTMLDyteMessageListViewElement;
    };
    interface HTMLDyteMessageViewElement extends Components.DyteMessageView, HTMLStencilElement {
    }
    var HTMLDyteMessageViewElement: {
        prototype: HTMLDyteMessageViewElement;
        new (): HTMLDyteMessageViewElement;
    };
    interface HTMLDyteMicToggleElement extends Components.DyteMicToggle, HTMLStencilElement {
    }
    var HTMLDyteMicToggleElement: {
        prototype: HTMLDyteMicToggleElement;
        new (): HTMLDyteMicToggleElement;
    };
    interface HTMLDyteMicrophoneSelectorElement extends Components.DyteMicrophoneSelector, HTMLStencilElement {
    }
    var HTMLDyteMicrophoneSelectorElement: {
        prototype: HTMLDyteMicrophoneSelectorElement;
        new (): HTMLDyteMicrophoneSelectorElement;
    };
    interface HTMLDyteMixedGridElement extends Components.DyteMixedGrid, HTMLStencilElement {
    }
    var HTMLDyteMixedGridElement: {
        prototype: HTMLDyteMixedGridElement;
        new (): HTMLDyteMixedGridElement;
    };
    interface HTMLDyteMoreToggleElement extends Components.DyteMoreToggle, HTMLStencilElement {
    }
    var HTMLDyteMoreToggleElement: {
        prototype: HTMLDyteMoreToggleElement;
        new (): HTMLDyteMoreToggleElement;
    };
    interface HTMLDyteMuteAllButtonElement extends Components.DyteMuteAllButton, HTMLStencilElement {
    }
    var HTMLDyteMuteAllButtonElement: {
        prototype: HTMLDyteMuteAllButtonElement;
        new (): HTMLDyteMuteAllButtonElement;
    };
    interface HTMLDyteMuteAllConfirmationElement extends Components.DyteMuteAllConfirmation, HTMLStencilElement {
    }
    var HTMLDyteMuteAllConfirmationElement: {
        prototype: HTMLDyteMuteAllConfirmationElement;
        new (): HTMLDyteMuteAllConfirmationElement;
    };
    interface HTMLDyteNameTagElement extends Components.DyteNameTag, HTMLStencilElement {
    }
    var HTMLDyteNameTagElement: {
        prototype: HTMLDyteNameTagElement;
        new (): HTMLDyteNameTagElement;
    };
    interface HTMLDyteNetworkIndicatorElement extends Components.DyteNetworkIndicator, HTMLStencilElement {
    }
    var HTMLDyteNetworkIndicatorElement: {
        prototype: HTMLDyteNetworkIndicatorElement;
        new (): HTMLDyteNetworkIndicatorElement;
    };
    interface HTMLDyteNotificationElement extends Components.DyteNotification, HTMLStencilElement {
    }
    var HTMLDyteNotificationElement: {
        prototype: HTMLDyteNotificationElement;
        new (): HTMLDyteNotificationElement;
    };
    interface HTMLDyteNotificationsElement extends Components.DyteNotifications, HTMLStencilElement {
    }
    var HTMLDyteNotificationsElement: {
        prototype: HTMLDyteNotificationsElement;
        new (): HTMLDyteNotificationsElement;
    };
    interface HTMLDyteOverlayModalElement extends Components.DyteOverlayModal, HTMLStencilElement {
    }
    var HTMLDyteOverlayModalElement: {
        prototype: HTMLDyteOverlayModalElement;
        new (): HTMLDyteOverlayModalElement;
    };
    interface HTMLDytePaginatedListElement extends Components.DytePaginatedList, HTMLStencilElement {
    }
    var HTMLDytePaginatedListElement: {
        prototype: HTMLDytePaginatedListElement;
        new (): HTMLDytePaginatedListElement;
    };
    interface HTMLDyteParticipantElement extends Components.DyteParticipant, HTMLStencilElement {
    }
    var HTMLDyteParticipantElement: {
        prototype: HTMLDyteParticipantElement;
        new (): HTMLDyteParticipantElement;
    };
    interface HTMLDyteParticipantCountElement extends Components.DyteParticipantCount, HTMLStencilElement {
    }
    var HTMLDyteParticipantCountElement: {
        prototype: HTMLDyteParticipantCountElement;
        new (): HTMLDyteParticipantCountElement;
    };
    interface HTMLDyteParticipantSetupElement extends Components.DyteParticipantSetup, HTMLStencilElement {
    }
    var HTMLDyteParticipantSetupElement: {
        prototype: HTMLDyteParticipantSetupElement;
        new (): HTMLDyteParticipantSetupElement;
    };
    interface HTMLDyteParticipantTileElement extends Components.DyteParticipantTile, HTMLStencilElement {
    }
    var HTMLDyteParticipantTileElement: {
        prototype: HTMLDyteParticipantTileElement;
        new (): HTMLDyteParticipantTileElement;
    };
    interface HTMLDyteParticipantsElement extends Components.DyteParticipants, HTMLStencilElement {
    }
    var HTMLDyteParticipantsElement: {
        prototype: HTMLDyteParticipantsElement;
        new (): HTMLDyteParticipantsElement;
    };
    interface HTMLDyteParticipantsAudioElement extends Components.DyteParticipantsAudio, HTMLStencilElement {
    }
    var HTMLDyteParticipantsAudioElement: {
        prototype: HTMLDyteParticipantsAudioElement;
        new (): HTMLDyteParticipantsAudioElement;
    };
    interface HTMLDyteParticipantsStageListElement extends Components.DyteParticipantsStageList, HTMLStencilElement {
    }
    var HTMLDyteParticipantsStageListElement: {
        prototype: HTMLDyteParticipantsStageListElement;
        new (): HTMLDyteParticipantsStageListElement;
    };
    interface HTMLDyteParticipantsStageQueueElement extends Components.DyteParticipantsStageQueue, HTMLStencilElement {
    }
    var HTMLDyteParticipantsStageQueueElement: {
        prototype: HTMLDyteParticipantsStageQueueElement;
        new (): HTMLDyteParticipantsStageQueueElement;
    };
    interface HTMLDyteParticipantsToggleElement extends Components.DyteParticipantsToggle, HTMLStencilElement {
    }
    var HTMLDyteParticipantsToggleElement: {
        prototype: HTMLDyteParticipantsToggleElement;
        new (): HTMLDyteParticipantsToggleElement;
    };
    interface HTMLDyteParticipantsViewerListElement extends Components.DyteParticipantsViewerList, HTMLStencilElement {
    }
    var HTMLDyteParticipantsViewerListElement: {
        prototype: HTMLDyteParticipantsViewerListElement;
        new (): HTMLDyteParticipantsViewerListElement;
    };
    interface HTMLDyteParticipantsWaitingListElement extends Components.DyteParticipantsWaitingList, HTMLStencilElement {
    }
    var HTMLDyteParticipantsWaitingListElement: {
        prototype: HTMLDyteParticipantsWaitingListElement;
        new (): HTMLDyteParticipantsWaitingListElement;
    };
    interface HTMLDytePermissionsMessageElement extends Components.DytePermissionsMessage, HTMLStencilElement {
    }
    var HTMLDytePermissionsMessageElement: {
        prototype: HTMLDytePermissionsMessageElement;
        new (): HTMLDytePermissionsMessageElement;
    };
    interface HTMLDytePipToggleElement extends Components.DytePipToggle, HTMLStencilElement {
    }
    var HTMLDytePipToggleElement: {
        prototype: HTMLDytePipToggleElement;
        new (): HTMLDytePipToggleElement;
    };
    interface HTMLDytePluginMainElement extends Components.DytePluginMain, HTMLStencilElement {
    }
    var HTMLDytePluginMainElement: {
        prototype: HTMLDytePluginMainElement;
        new (): HTMLDytePluginMainElement;
    };
    interface HTMLDytePluginsElement extends Components.DytePlugins, HTMLStencilElement {
    }
    var HTMLDytePluginsElement: {
        prototype: HTMLDytePluginsElement;
        new (): HTMLDytePluginsElement;
    };
    interface HTMLDytePluginsToggleElement extends Components.DytePluginsToggle, HTMLStencilElement {
    }
    var HTMLDytePluginsToggleElement: {
        prototype: HTMLDytePluginsToggleElement;
        new (): HTMLDytePluginsToggleElement;
    };
    interface HTMLDytePollElement extends Components.DytePoll, HTMLStencilElement {
    }
    var HTMLDytePollElement: {
        prototype: HTMLDytePollElement;
        new (): HTMLDytePollElement;
    };
    interface HTMLDytePollFormElement extends Components.DytePollForm, HTMLStencilElement {
    }
    var HTMLDytePollFormElement: {
        prototype: HTMLDytePollFormElement;
        new (): HTMLDytePollFormElement;
    };
    interface HTMLDytePollsElement extends Components.DytePolls, HTMLStencilElement {
    }
    var HTMLDytePollsElement: {
        prototype: HTMLDytePollsElement;
        new (): HTMLDytePollsElement;
    };
    interface HTMLDytePollsToggleElement extends Components.DytePollsToggle, HTMLStencilElement {
    }
    var HTMLDytePollsToggleElement: {
        prototype: HTMLDytePollsToggleElement;
        new (): HTMLDytePollsToggleElement;
    };
    interface HTMLDyteRecordingIndicatorElement extends Components.DyteRecordingIndicator, HTMLStencilElement {
    }
    var HTMLDyteRecordingIndicatorElement: {
        prototype: HTMLDyteRecordingIndicatorElement;
        new (): HTMLDyteRecordingIndicatorElement;
    };
    interface HTMLDyteRecordingToggleElement extends Components.DyteRecordingToggle, HTMLStencilElement {
    }
    var HTMLDyteRecordingToggleElement: {
        prototype: HTMLDyteRecordingToggleElement;
        new (): HTMLDyteRecordingToggleElement;
    };
    interface HTMLDyteScreenShareToggleElement extends Components.DyteScreenShareToggle, HTMLStencilElement {
    }
    var HTMLDyteScreenShareToggleElement: {
        prototype: HTMLDyteScreenShareToggleElement;
        new (): HTMLDyteScreenShareToggleElement;
    };
    interface HTMLDyteScreenshareViewElement extends Components.DyteScreenshareView, HTMLStencilElement {
    }
    var HTMLDyteScreenshareViewElement: {
        prototype: HTMLDyteScreenshareViewElement;
        new (): HTMLDyteScreenshareViewElement;
    };
    interface HTMLDyteSettingsElement extends Components.DyteSettings, HTMLStencilElement {
    }
    var HTMLDyteSettingsElement: {
        prototype: HTMLDyteSettingsElement;
        new (): HTMLDyteSettingsElement;
    };
    interface HTMLDyteSettingsAudioElement extends Components.DyteSettingsAudio, HTMLStencilElement {
    }
    var HTMLDyteSettingsAudioElement: {
        prototype: HTMLDyteSettingsAudioElement;
        new (): HTMLDyteSettingsAudioElement;
    };
    interface HTMLDyteSettingsToggleElement extends Components.DyteSettingsToggle, HTMLStencilElement {
    }
    var HTMLDyteSettingsToggleElement: {
        prototype: HTMLDyteSettingsToggleElement;
        new (): HTMLDyteSettingsToggleElement;
    };
    interface HTMLDyteSettingsVideoElement extends Components.DyteSettingsVideo, HTMLStencilElement {
    }
    var HTMLDyteSettingsVideoElement: {
        prototype: HTMLDyteSettingsVideoElement;
        new (): HTMLDyteSettingsVideoElement;
    };
    interface HTMLDyteSetupScreenElement extends Components.DyteSetupScreen, HTMLStencilElement {
    }
    var HTMLDyteSetupScreenElement: {
        prototype: HTMLDyteSetupScreenElement;
        new (): HTMLDyteSetupScreenElement;
    };
    interface HTMLDyteSidebarElement extends Components.DyteSidebar, HTMLStencilElement {
    }
    var HTMLDyteSidebarElement: {
        prototype: HTMLDyteSidebarElement;
        new (): HTMLDyteSidebarElement;
    };
    interface HTMLDyteSidebarUiElement extends Components.DyteSidebarUi, HTMLStencilElement {
    }
    var HTMLDyteSidebarUiElement: {
        prototype: HTMLDyteSidebarUiElement;
        new (): HTMLDyteSidebarUiElement;
    };
    interface HTMLDyteSimpleGridElement extends Components.DyteSimpleGrid, HTMLStencilElement {
    }
    var HTMLDyteSimpleGridElement: {
        prototype: HTMLDyteSimpleGridElement;
        new (): HTMLDyteSimpleGridElement;
    };
    interface HTMLDyteSpeakerSelectorElement extends Components.DyteSpeakerSelector, HTMLStencilElement {
    }
    var HTMLDyteSpeakerSelectorElement: {
        prototype: HTMLDyteSpeakerSelectorElement;
        new (): HTMLDyteSpeakerSelectorElement;
    };
    interface HTMLDyteSpinnerElement extends Components.DyteSpinner, HTMLStencilElement {
    }
    var HTMLDyteSpinnerElement: {
        prototype: HTMLDyteSpinnerElement;
        new (): HTMLDyteSpinnerElement;
    };
    interface HTMLDyteSpotlightGridElement extends Components.DyteSpotlightGrid, HTMLStencilElement {
    }
    var HTMLDyteSpotlightGridElement: {
        prototype: HTMLDyteSpotlightGridElement;
        new (): HTMLDyteSpotlightGridElement;
    };
    interface HTMLDyteSpotlightIndicatorElement extends Components.DyteSpotlightIndicator, HTMLStencilElement {
    }
    var HTMLDyteSpotlightIndicatorElement: {
        prototype: HTMLDyteSpotlightIndicatorElement;
        new (): HTMLDyteSpotlightIndicatorElement;
    };
    interface HTMLDyteStageElement extends Components.DyteStage, HTMLStencilElement {
    }
    var HTMLDyteStageElement: {
        prototype: HTMLDyteStageElement;
        new (): HTMLDyteStageElement;
    };
    interface HTMLDyteStageToggleElement extends Components.DyteStageToggle, HTMLStencilElement {
    }
    var HTMLDyteStageToggleElement: {
        prototype: HTMLDyteStageToggleElement;
        new (): HTMLDyteStageToggleElement;
    };
    interface HTMLDyteSwitchElement extends Components.DyteSwitch, HTMLStencilElement {
    }
    var HTMLDyteSwitchElement: {
        prototype: HTMLDyteSwitchElement;
        new (): HTMLDyteSwitchElement;
    };
    interface HTMLDyteTabBarElement extends Components.DyteTabBar, HTMLStencilElement {
    }
    var HTMLDyteTabBarElement: {
        prototype: HTMLDyteTabBarElement;
        new (): HTMLDyteTabBarElement;
    };
    interface HTMLDyteTextComposerViewElement extends Components.DyteTextComposerView, HTMLStencilElement {
    }
    var HTMLDyteTextComposerViewElement: {
        prototype: HTMLDyteTextComposerViewElement;
        new (): HTMLDyteTextComposerViewElement;
    };
    interface HTMLDyteTextFieldElement extends Components.DyteTextField, HTMLStencilElement {
    }
    var HTMLDyteTextFieldElement: {
        prototype: HTMLDyteTextFieldElement;
        new (): HTMLDyteTextFieldElement;
    };
    interface HTMLDyteTextMessageElement extends Components.DyteTextMessage, HTMLStencilElement {
    }
    var HTMLDyteTextMessageElement: {
        prototype: HTMLDyteTextMessageElement;
        new (): HTMLDyteTextMessageElement;
    };
    interface HTMLDyteTextMessageViewElement extends Components.DyteTextMessageView, HTMLStencilElement {
    }
    var HTMLDyteTextMessageViewElement: {
        prototype: HTMLDyteTextMessageViewElement;
        new (): HTMLDyteTextMessageViewElement;
    };
    interface HTMLDyteTooltipElement extends Components.DyteTooltip, HTMLStencilElement {
    }
    var HTMLDyteTooltipElement: {
        prototype: HTMLDyteTooltipElement;
        new (): HTMLDyteTooltipElement;
    };
    interface HTMLDyteTranscriptElement extends Components.DyteTranscript, HTMLStencilElement {
    }
    var HTMLDyteTranscriptElement: {
        prototype: HTMLDyteTranscriptElement;
        new (): HTMLDyteTranscriptElement;
    };
    interface HTMLDyteTranscriptsElement extends Components.DyteTranscripts, HTMLStencilElement {
    }
    var HTMLDyteTranscriptsElement: {
        prototype: HTMLDyteTranscriptsElement;
        new (): HTMLDyteTranscriptsElement;
    };
    interface HTMLDyteUiProviderElement extends Components.DyteUiProvider, HTMLStencilElement {
    }
    var HTMLDyteUiProviderElement: {
        prototype: HTMLDyteUiProviderElement;
        new (): HTMLDyteUiProviderElement;
    };
    interface HTMLDyteViewerCountElement extends Components.DyteViewerCount, HTMLStencilElement {
    }
    var HTMLDyteViewerCountElement: {
        prototype: HTMLDyteViewerCountElement;
        new (): HTMLDyteViewerCountElement;
    };
    interface HTMLDyteWaitingScreenElement extends Components.DyteWaitingScreen, HTMLStencilElement {
    }
    var HTMLDyteWaitingScreenElement: {
        prototype: HTMLDyteWaitingScreenElement;
        new (): HTMLDyteWaitingScreenElement;
    };
    interface HTMLElementTagNameMap {
        "dyte-ai": HTMLDyteAiElement;
        "dyte-ai-chat": HTMLDyteAiChatElement;
        "dyte-ai-home": HTMLDyteAiHomeElement;
        "dyte-ai-toggle": HTMLDyteAiToggleElement;
        "dyte-ai-transcriptions": HTMLDyteAiTranscriptionsElement;
        "dyte-audio-grid": HTMLDyteAudioGridElement;
        "dyte-audio-tile": HTMLDyteAudioTileElement;
        "dyte-audio-visualizer": HTMLDyteAudioVisualizerElement;
        "dyte-avatar": HTMLDyteAvatarElement;
        "dyte-breakout-room-manager": HTMLDyteBreakoutRoomManagerElement;
        "dyte-breakout-room-participants": HTMLDyteBreakoutRoomParticipantsElement;
        "dyte-breakout-rooms-manager": HTMLDyteBreakoutRoomsManagerElement;
        "dyte-breakout-rooms-toggle": HTMLDyteBreakoutRoomsToggleElement;
        "dyte-broadcast-message-modal": HTMLDyteBroadcastMessageModalElement;
        "dyte-button": HTMLDyteButtonElement;
        "dyte-camera-selector": HTMLDyteCameraSelectorElement;
        "dyte-camera-toggle": HTMLDyteCameraToggleElement;
        "dyte-caption-toggle": HTMLDyteCaptionToggleElement;
        "dyte-channel-creator": HTMLDyteChannelCreatorElement;
        "dyte-channel-details": HTMLDyteChannelDetailsElement;
        "dyte-channel-header": HTMLDyteChannelHeaderElement;
        "dyte-channel-selector-ui": HTMLDyteChannelSelectorUiElement;
        "dyte-channel-selector-view": HTMLDyteChannelSelectorViewElement;
        "dyte-chat": HTMLDyteChatElement;
        "dyte-chat-composer-ui": HTMLDyteChatComposerUiElement;
        "dyte-chat-composer-view": HTMLDyteChatComposerViewElement;
        "dyte-chat-message": HTMLDyteChatMessageElement;
        "dyte-chat-messages-ui": HTMLDyteChatMessagesUiElement;
        "dyte-chat-messages-ui-paginated": HTMLDyteChatMessagesUiPaginatedElement;
        "dyte-chat-search-results": HTMLDyteChatSearchResultsElement;
        "dyte-chat-selector-ui": HTMLDyteChatSelectorUiElement;
        "dyte-chat-toggle": HTMLDyteChatToggleElement;
        "dyte-clock": HTMLDyteClockElement;
        "dyte-confirmation-modal": HTMLDyteConfirmationModalElement;
        "dyte-controlbar": HTMLDyteControlbarElement;
        "dyte-controlbar-button": HTMLDyteControlbarButtonElement;
        "dyte-counter": HTMLDyteCounterElement;
        "dyte-dialog": HTMLDyteDialogElement;
        "dyte-dialog-manager": HTMLDyteDialogManagerElement;
        "dyte-draft-attachment-view": HTMLDyteDraftAttachmentViewElement;
        "dyte-emoji-picker": HTMLDyteEmojiPickerElement;
        "dyte-emoji-picker-button": HTMLDyteEmojiPickerButtonElement;
        "dyte-ended-screen": HTMLDyteEndedScreenElement;
        "dyte-file-dropzone": HTMLDyteFileDropzoneElement;
        "dyte-file-message": HTMLDyteFileMessageElement;
        "dyte-file-message-view": HTMLDyteFileMessageViewElement;
        "dyte-file-picker-button": HTMLDyteFilePickerButtonElement;
        "dyte-fullscreen-toggle": HTMLDyteFullscreenToggleElement;
        "dyte-grid": HTMLDyteGridElement;
        "dyte-grid-pagination": HTMLDyteGridPaginationElement;
        "dyte-header": HTMLDyteHeaderElement;
        "dyte-icon": HTMLDyteIconElement;
        "dyte-idle-screen": HTMLDyteIdleScreenElement;
        "dyte-image-message": HTMLDyteImageMessageElement;
        "dyte-image-message-view": HTMLDyteImageMessageViewElement;
        "dyte-image-viewer": HTMLDyteImageViewerElement;
        "dyte-information-tooltip": HTMLDyteInformationTooltipElement;
        "dyte-join-stage": HTMLDyteJoinStageElement;
        "dyte-leave-button": HTMLDyteLeaveButtonElement;
        "dyte-leave-meeting": HTMLDyteLeaveMeetingElement;
        "dyte-livestream-indicator": HTMLDyteLivestreamIndicatorElement;
        "dyte-livestream-player": HTMLDyteLivestreamPlayerElement;
        "dyte-livestream-toggle": HTMLDyteLivestreamToggleElement;
        "dyte-logo": HTMLDyteLogoElement;
        "dyte-markdown-view": HTMLDyteMarkdownViewElement;
        "dyte-meeting": HTMLDyteMeetingElement;
        "dyte-meeting-title": HTMLDyteMeetingTitleElement;
        "dyte-menu": HTMLDyteMenuElement;
        "dyte-menu-item": HTMLDyteMenuItemElement;
        "dyte-menu-list": HTMLDyteMenuListElement;
        "dyte-message-list-view": HTMLDyteMessageListViewElement;
        "dyte-message-view": HTMLDyteMessageViewElement;
        "dyte-mic-toggle": HTMLDyteMicToggleElement;
        "dyte-microphone-selector": HTMLDyteMicrophoneSelectorElement;
        "dyte-mixed-grid": HTMLDyteMixedGridElement;
        "dyte-more-toggle": HTMLDyteMoreToggleElement;
        "dyte-mute-all-button": HTMLDyteMuteAllButtonElement;
        "dyte-mute-all-confirmation": HTMLDyteMuteAllConfirmationElement;
        "dyte-name-tag": HTMLDyteNameTagElement;
        "dyte-network-indicator": HTMLDyteNetworkIndicatorElement;
        "dyte-notification": HTMLDyteNotificationElement;
        "dyte-notifications": HTMLDyteNotificationsElement;
        "dyte-overlay-modal": HTMLDyteOverlayModalElement;
        "dyte-paginated-list": HTMLDytePaginatedListElement;
        "dyte-participant": HTMLDyteParticipantElement;
        "dyte-participant-count": HTMLDyteParticipantCountElement;
        "dyte-participant-setup": HTMLDyteParticipantSetupElement;
        "dyte-participant-tile": HTMLDyteParticipantTileElement;
        "dyte-participants": HTMLDyteParticipantsElement;
        "dyte-participants-audio": HTMLDyteParticipantsAudioElement;
        "dyte-participants-stage-list": HTMLDyteParticipantsStageListElement;
        "dyte-participants-stage-queue": HTMLDyteParticipantsStageQueueElement;
        "dyte-participants-toggle": HTMLDyteParticipantsToggleElement;
        "dyte-participants-viewer-list": HTMLDyteParticipantsViewerListElement;
        "dyte-participants-waiting-list": HTMLDyteParticipantsWaitingListElement;
        "dyte-permissions-message": HTMLDytePermissionsMessageElement;
        "dyte-pip-toggle": HTMLDytePipToggleElement;
        "dyte-plugin-main": HTMLDytePluginMainElement;
        "dyte-plugins": HTMLDytePluginsElement;
        "dyte-plugins-toggle": HTMLDytePluginsToggleElement;
        "dyte-poll": HTMLDytePollElement;
        "dyte-poll-form": HTMLDytePollFormElement;
        "dyte-polls": HTMLDytePollsElement;
        "dyte-polls-toggle": HTMLDytePollsToggleElement;
        "dyte-recording-indicator": HTMLDyteRecordingIndicatorElement;
        "dyte-recording-toggle": HTMLDyteRecordingToggleElement;
        "dyte-screen-share-toggle": HTMLDyteScreenShareToggleElement;
        "dyte-screenshare-view": HTMLDyteScreenshareViewElement;
        "dyte-settings": HTMLDyteSettingsElement;
        "dyte-settings-audio": HTMLDyteSettingsAudioElement;
        "dyte-settings-toggle": HTMLDyteSettingsToggleElement;
        "dyte-settings-video": HTMLDyteSettingsVideoElement;
        "dyte-setup-screen": HTMLDyteSetupScreenElement;
        "dyte-sidebar": HTMLDyteSidebarElement;
        "dyte-sidebar-ui": HTMLDyteSidebarUiElement;
        "dyte-simple-grid": HTMLDyteSimpleGridElement;
        "dyte-speaker-selector": HTMLDyteSpeakerSelectorElement;
        "dyte-spinner": HTMLDyteSpinnerElement;
        "dyte-spotlight-grid": HTMLDyteSpotlightGridElement;
        "dyte-spotlight-indicator": HTMLDyteSpotlightIndicatorElement;
        "dyte-stage": HTMLDyteStageElement;
        "dyte-stage-toggle": HTMLDyteStageToggleElement;
        "dyte-switch": HTMLDyteSwitchElement;
        "dyte-tab-bar": HTMLDyteTabBarElement;
        "dyte-text-composer-view": HTMLDyteTextComposerViewElement;
        "dyte-text-field": HTMLDyteTextFieldElement;
        "dyte-text-message": HTMLDyteTextMessageElement;
        "dyte-text-message-view": HTMLDyteTextMessageViewElement;
        "dyte-tooltip": HTMLDyteTooltipElement;
        "dyte-transcript": HTMLDyteTranscriptElement;
        "dyte-transcripts": HTMLDyteTranscriptsElement;
        "dyte-ui-provider": HTMLDyteUiProviderElement;
        "dyte-viewer-count": HTMLDyteViewerCountElement;
        "dyte-waiting-screen": HTMLDyteWaitingScreenElement;
    }
}
declare namespace LocalJSX {
    interface DyteAi {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Default section
         */
        "defaultSection"?: AISection;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteAiCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * View type
         */
        "view"?: AIView;
    }
    interface DyteAiChat {
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteAiHome {
        /**
          * Initial messages
         */
        "initialMessages"?: AIMessage[];
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
    }
    interface DyteAiToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteAiToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteAiTranscriptions {
        /**
          * Initial transcriptions
         */
        "initialTranscriptions"?: Transcript[];
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteAudioGrid {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Whether to hide self in the grid
         */
        "hideSelf"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteAudioTile {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Participant object
         */
        "participant"?: Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteAudioVisualizer {
        /**
          * Hide when there is no audio / audio is muted
         */
        "hideMuted"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Audio visualizer for screensharing, it will use screenShareTracks.audio instead of audioTrack
         */
        "isScreenShare"?: boolean;
        /**
          * Participant object
         */
        "participant"?: Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: AudioVisualizerVariant;
    }
    interface DyteAvatar {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Participant object
         */
        "participant"?: Peer | WaitlistedParticipant | { name: string; picture: string };
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Avatar type
         */
        "variant"?: AvatarVariant;
    }
    interface DyteBreakoutRoomManager {
        /**
          * allow room delete
         */
        "allowDelete"?: boolean;
        /**
          * Enable updating participants
         */
        "assigningParticipants"?: boolean;
        /**
          * display expanded card by default
         */
        "defaultExpanded"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Drag mode
         */
        "isDragMode"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Mode in which selector is used
         */
        "mode"?: 'edit' | 'create';
        /**
          * Event for deleting room
         */
        "onDelete"?: (event: DyteBreakoutRoomManagerCustomEvent<string>) => void;
        /**
          * On Delete event emitter
         */
        "onParticipantDelete"?: (event: DyteBreakoutRoomManagerCustomEvent<{
    customParticipantId: string;
  }>) => void;
        /**
          * Event for adding a participant
         */
        "onParticipantsAdd"?: (event: DyteBreakoutRoomManagerCustomEvent<null>) => void;
        /**
          * Event for joining a room
         */
        "onRoomJoin"?: (event: DyteBreakoutRoomManagerCustomEvent<null>) => void;
        /**
          * Event for updating room details
         */
        "onUpdate"?: (event: DyteBreakoutRoomManagerCustomEvent<{
    title: string | undefined;
    id: string;
  }>) => void;
        /**
          * Connected Room Config Object
         */
        "room"?: DraftMeeting;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteBreakoutRoomParticipants {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits an event when all participants are selected or deselected
         */
        "onAllParticipantsToggleUpdate"?: (event: DyteBreakoutRoomParticipantsCustomEvent<string[]>) => void;
        /**
          * Emits an event when participants are dragged
         */
        "onParticipantsDragging"?: (event: DyteBreakoutRoomParticipantsCustomEvent<boolean>) => void;
        /**
          * Emits an event when selected participants are updated
         */
        "onSelectedParticipantsUpdate"?: (event: DyteBreakoutRoomParticipantsCustomEvent<string[]>) => void;
        /**
          * Participant ids
         */
        "participantIds"?: string[];
        /**
          * selected participants
         */
        "selectedParticipantIds"?: string[];
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteBreakoutRoomsManager {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteBreakoutRoomsManagerCustomEvent<Partial<States>>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteBreakoutRoomsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteBreakoutRoomsToggleCustomEvent<Partial<States>>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteBroadcastMessageModal {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteBroadcastMessageModalCustomEvent<States1>) => void;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteButton {
        /**
          * Where the button is disabled or not
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Button type
         */
        "kind"?: ButtonKind;
        /**
          * Whether to reverse order of children
         */
        "reverse"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Button type
         */
        "type"?: HTMLButtonElement['type'];
        /**
          * Button variant
         */
        "variant"?: ButtonVariant;
    }
    interface DyteCameraSelector {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * variant
         */
        "variant"?: 'full' | 'inline';
    }
    interface DyteCameraToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteCameraToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteCaptionToggle {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteCaptionToggleCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteChannelCreator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteChannelCreatorCustomEvent<States1>) => void;
        /**
          * Emits event to switch channel
         */
        "onSwitchChannel"?: (event: DyteChannelCreatorCustomEvent<string>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteChannelDetails {
        /**
          * Channel object
         */
        "channel": ChatChannel;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * List of channel members
         */
        "members"?: DyteBasicParticipant[];
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteChannelHeader {
        /**
          * Channel object
         */
        "channel"?: ChatChannel;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event emitted when back button is clicked
         */
        "onBack"?: (event: DyteChannelHeaderCustomEvent<void>) => void;
        /**
          * event triggered for search
         */
        "onSearch"?: (event: DyteChannelHeaderCustomEvent<string>) => void;
        /**
          * event triggered for search
         */
        "onSearchDismissed"?: (event: DyteChannelHeaderCustomEvent<any>) => void;
        /**
          * Show back button
         */
        "showBackButton"?: boolean;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteChannelSelectorUi {
        /**
          * Channels
         */
        "channels"?: ChatChannel[];
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * On channel changed
         */
        "onChannelChanged"?: (event: DyteChannelSelectorUiCustomEvent<string>) => void;
        /**
          * Selected channel id
         */
        "selectedChannelId"?: string;
        /**
          * show recent message in channel
         */
        "showRecentMessage"?: boolean;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteChannelSelectorView {
        /**
          * Channels
         */
        "channels": {
    id: string;
    name: string;
    avatarUrl?: string;
    icon?: keyof IconPack1;
    latestMessage?: string;
    latestMessageTime?: Date;
    unreadCount?: number;
  }[];
        /**
          * Disables search bar (default = false)
         */
        "disableSearch"?: boolean;
        /**
          * Hides avatar (default = false)
         */
        "hideAvatar"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Event emitted when selected channel changes
         */
        "onChannelChange"?: (event: DyteChannelSelectorViewCustomEvent<{
    id: string;
    name: string;
    avatarUrl?: string;
    icon?: keyof IconPack1;
    latestMessage?: string;
    latestMessageTime?: Date;
    unreadCount?: number;
  }>) => void;
        /**
          * Selected channel id
         */
        "selectedChannelId"?: string;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * Render as dropdown or list (default = list)
         */
        "viewAs"?: 'dropdown' | 'list';
    }
    interface DyteChat {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * disables private chat
         */
        "disablePrivateChat"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteChatCustomEvent<States1>) => void;
        /**
          * @deprecated Beta API, will change in future List of target presets allowed as private chat recipient
         */
        "privatePresetFilter"?: String[];
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteChatComposerUi {
        /**
          * Whether user can send file messages
         */
        "canSendFiles"?: boolean;
        /**
          * Whether user can send text messages
         */
        "canSendTextMessage"?: boolean;
        /**
          * channel id
         */
        "channelId"?: string;
        /**
          * Whether to show emoji picker
         */
        "disableEmojiPicker"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * list of members that can be mentioned
         */
        "members"?: DyteBasicParticipant[];
        /**
          * Event emitted when message editing is cancelled
         */
        "onDyteEditCancelled"?: (event: DyteChatComposerUiCustomEvent<any>) => void;
        /**
          * Event emitted when message is edited
         */
        "onDyteEditMessage"?: (event: DyteChatComposerUiCustomEvent<{
    id: string;
    message: string;
    channelId?: string;
  }>) => void;
        /**
          * Event emitted when new message is submitted
         */
        "onDyteNewMessage"?: (event: DyteChatComposerUiCustomEvent<DyteNewMessageEvent>) => void;
        /**
          * prefill the composer
         */
        "prefill"?: {
    suggestedReplies?: string[];
    editMessage?: TextMessage;
    replyMessage?: TextMessage;
  };
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteChatComposerView {
        /**
          * Whether user can send file messages
         */
        "canSendFiles"?: boolean;
        /**
          * Whether user can send text messages
         */
        "canSendTextMessage"?: boolean;
        /**
          * Whether to show emoji picker
         */
        "disableEmojiPicker"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Placeholder for text input
         */
        "inputTextPlaceholder"?: string;
        /**
          * Sets composer to edit mode
         */
        "isEditing"?: boolean;
        /**
          * Max length for text input
         */
        "maxLength"?: number;
        /**
          * Message to be pre-populated
         */
        "message"?: string;
        /**
          * Event emitted when message editing is cancelled
         */
        "onEditCancel"?: (event: DyteChatComposerViewCustomEvent<void>) => void;
        /**
          * Event emitted when message is edited
         */
        "onEditMessage"?: (event: DyteChatComposerViewCustomEvent<string>) => void;
        /**
          * Event emitted when new message is submitted
         */
        "onNewMessage"?: (event: DyteChatComposerViewCustomEvent<NewMessageEvent>) => void;
        /**
          * Event emitted when quoted message is dismissed
         */
        "onQuotedMessageDismiss"?: (event: DyteChatComposerViewCustomEvent<void>) => void;
        /**
          * Quote message to be displayed
         */
        "quotedMessage"?: string;
        /**
          * Rate limits
         */
        "rateLimits"?: { period: number; maxInvocations: number; };
        /**
          * Key for storing message in localStorage
         */
        "storageKey"?: string;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteChatMessage {
        /**
          * aligns message to right
         */
        "alignRight"?: boolean;
        /**
          * can delete message
         */
        "canDelete"?: boolean;
        /**
          * can edit message
         */
        "canEdit"?: boolean;
        /**
          * can pin this message
         */
        "canPin"?: boolean;
        /**
          * can quote reply this message
         */
        "canReply"?: boolean;
        /**
          * Child
         */
        "child"?: HTMLElement;
        /**
          * disables controls
         */
        "disableControls"?: boolean;
        /**
          * hides avatar
         */
        "hideAvatar"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * is continued
         */
        "isContinued"?: boolean;
        /**
          * if sender is self
         */
        "isSelf"?: boolean;
        /**
          * is unread
         */
        "isUnread"?: boolean;
        /**
          * Whether to left align the chat bubbles
         */
        "leftAlign"?: boolean;
        /**
          * message item
         */
        "message"?: Message;
        /**
          * Event for when edit is clicked on a message
         */
        "onDelete"?: (event: DyteChatMessageCustomEvent<Message>) => void;
        /**
          * Event for when edit is clicked on a message
         */
        "onEdit"?: (event: DyteChatMessageCustomEvent<Message>) => void;
        /**
          * Event for when pin is clicked on a message
         */
        "onPin"?: (event: DyteChatMessageCustomEvent<Message>) => void;
        /**
          * Event for when reply is clicked on a message
         */
        "onReply"?: (event: DyteChatMessageCustomEvent<Message>) => void;
        /**
          * sender display picture url
         */
        "senderDisplayPicture"?: string;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteChatMessagesUi {
        /**
          * Can current user pin/unpin messages
         */
        "canPinMessages"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Chat Messages
         */
        "messages"?: Chat[];
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteChatMessagesUiCustomEvent<States>) => void;
        /**
          * Event emitted when a message is pinned or unpinned
         */
        "onPinMessage"?: (event: DyteChatMessagesUiCustomEvent<Message>) => void;
        /**
          * Selected group key
         */
        "selectedGroup"?: string;
        /**
          * User ID of self user
         */
        "selfUserId"?: string;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteChatMessagesUiPaginated {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether to align chat bubbles to the left
         */
        "leftAlign"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event emitted when a message is deleted
         */
        "onDeleteMessage"?: (event: DyteChatMessagesUiPaginatedCustomEvent<Message>) => void;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteChatMessagesUiPaginatedCustomEvent<States>) => void;
        /**
          * Event for editing a message
         */
        "onEditMessageInit"?: (event: DyteChatMessagesUiPaginatedCustomEvent<{
    payload: TextMessage;
    flags: { isReply?: boolean; isEdit?: boolean };
  }>) => void;
        /**
          * Event emitted when a message is pinned or unpinned
         */
        "onPinMessage"?: (event: DyteChatMessagesUiPaginatedCustomEvent<Message>) => void;
        /**
          * Selected channel
         */
        "selectedChannel"?: ChatChannel;
        /**
          * Selected channel id
         */
        "selectedChannelId"?: string;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteChatSearchResults {
        /**
          * Channel id
         */
        "channelId"?: string;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Search query
         */
        "query"?: string;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteChatSelectorUi {
        /**
          * Participants
         */
        "groups"?: ChatGroup[];
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Event emitted when chat scope is changed
         */
        "onDyteChatGroupChanged"?: (event: DyteChatSelectorUiCustomEvent<ChatGroupChangedType>) => void;
        /**
          * Selected participant
         */
        "selectedGroupId"?: string;
        /**
          * Self User ID
         */
        "selfUserId"?: string;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Unread counts
         */
        "unreadCounts"?: Record<string, number>;
    }
    interface DyteChatToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteChatToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteClock {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteConfirmationModal {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteConfirmationModalCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteControlbar {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Whether to render the default UI
         */
        "disableRender"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'boxed';
    }
    interface DyteControlbarButton {
        /**
          * Whether icon requires brand color
         */
        "brandIcon"?: boolean;
        /**
          * Whether button is disabled
         */
        "disabled"?: boolean;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Loading state Ignores current icon and shows a spinner if true
         */
        "isLoading"?: boolean;
        /**
          * Label of button
         */
        "label"?: string;
        /**
          * Whether to show warning icon
         */
        "showWarning"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteCounter {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Minimum value
         */
        "minValue"?: number;
        /**
          * On change event emitter
         */
        "onValueChange"?: (event: DyteCounterCustomEvent<string>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Initial value
         */
        "value"?: number;
    }
    interface DyteDialog {
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Whether Escape key can close the modal
         */
        "disableEscapeKey"?: boolean;
        /**
          * Whether to show the close button
         */
        "hideCloseButton"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event emitted when dialog is closed
         */
        "onDyteDialogClose"?: (event: DyteDialogCustomEvent<any>) => void;
        /**
          * Whether a dialog is open or not
         */
        "open"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteDialogManager {
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteDialogManagerCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteDraftAttachmentView {
        /**
          * Attachment to display
         */
        "attachment"?: {
    type: 'image' | 'file';
    file: File;
  };
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Event triggered when the attachment is deleted
         */
        "onDeleteAttachment"?: (event: DyteDraftAttachmentViewCustomEvent<any>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteEmojiPicker {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Event which is emitted when an Emoji is clicked
         */
        "onDyteEmojiClicked"?: (event: DyteEmojiPickerCustomEvent<string>) => void;
        /**
          * Close event
         */
        "onPickerClose"?: (event: DyteEmojiPickerCustomEvent<void>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteEmojiPickerButton {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Active state indicator
         */
        "isActive"?: boolean;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteEndedScreen {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Global states
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Global states
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteFileDropzone {
        /**
          * Host element on which drop events to attach
         */
        "hostEl"?: HTMLElement;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * drop event callback
         */
        "onDropCallback"?: (event: DyteFileDropzoneCustomEvent<DragEvent>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteFileMessage {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued"?: boolean;
        /**
          * Text message object
         */
        "message": FileMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now"?: Date;
        /**
          * show message in bubble
         */
        "showBubble"?: boolean;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteFileMessageView {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Name of the file
         */
        "name": string;
        /**
          * Size of the file
         */
        "size": number;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * Url of the file
         */
        "url": string;
    }
    interface DyteFilePickerButton {
        /**
          * File type filter to open file picker with
         */
        "filter"?: string;
        /**
          * Icon
         */
        "icon"?: keyof IconPack1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Label for tooltip
         */
        "label"?: string;
        /**
          * Event when a file is selected for upload
         */
        "onFileChange"?: (event: DyteFilePickerButtonCustomEvent<File>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteFullscreenToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteFullscreenToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Target Element to fullscreen
         */
        "targetElement"?: HTMLElement;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteGrid {
        /**
          * The aspect ratio of each participant
         */
        "aspectRatio"?: string;
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Gap between participants
         */
        "gap"?: number;
        /**
          * Grid size
         */
        "gridSize"?: GridSize;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Grid Layout
         */
        "layout"?: GridLayout;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteGridCustomEvent<States>) => void;
        /**
          * @deprecated
         */
        "overrides"?: any;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteGridPagination {
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size Prop
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: GridPaginationVariants;
    }
    interface DyteHeader {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Whether to render the default UI
         */
        "disableRender"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'boxed';
    }
    interface DyteIcon {
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Icon variant
         */
        "variant"?: IconVariant;
    }
    interface DyteIdleScreen {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteImageMessage {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued"?: boolean;
        /**
          * Text message object
         */
        "message": ImageMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now"?: Date;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteImageMessageCustomEvent<States>) => void;
        /**
          * show message in bubble
         */
        "showBubble"?: boolean;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteImageMessageView {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * preview event
         */
        "onPreview"?: (event: DyteImageMessageViewCustomEvent<string>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * Url of the image
         */
        "url": string;
    }
    interface DyteImageViewer {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Image message
         */
        "image": ImageMessage;
        /**
          * Emitted when viewer should be closed
         */
        "onClose"?: (event: DyteImageViewerCustomEvent<void>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteInformationTooltip {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
    }
    interface DyteJoinStage {
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Content Config
         */
        "dataConfig"?: ModalDataConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event which is emitted when user confirms joining stage
         */
        "onDyteJoinStage"?: (event: DyteJoinStageCustomEvent<void>) => void;
        /**
          * Event which is emitted when user cancel joining stage
         */
        "onDyteLeaveStage"?: (event: DyteJoinStageCustomEvent<void>) => void;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteJoinStageCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteLeaveButton {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteLeaveButtonCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteLeaveMeeting {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteLeaveMeetingCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteLivestreamIndicator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteLivestreamPlayer {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit API error events
         */
        "onDyteAPIError"?: (event: DyteLivestreamPlayerCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteLivestreamToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit API error events
         */
        "onDyteAPIError"?: (event: DyteLivestreamToggleCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteLivestreamToggleCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteLogo {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Logo URL
         */
        "logoUrl"?: string;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteMarkdownView {
        /**
          * max length of text to render as markdown
         */
        "maxLength"?: number;
        /**
          * raw text to render as markdown
         */
        "text"?: string;
    }
    interface DyteMeeting {
        /**
          * Whether to apply the design system on the document root from config
         */
        "applyDesignSystem"?: boolean;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Grid layout
         */
        "gridLayout"?: GridLayout1;
        /**
          * Icon Pack URL
         */
        "iconPackUrl"?: string;
        /**
          * Whether participant should leave when this component gets unmounted
         */
        "leaveOnUnmount"?: boolean;
        /**
          * Whether to load config from preset
         */
        "loadConfigFromPreset"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Fill type
         */
        "mode"?: MeetingMode;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteMeetingCustomEvent<Partial<States>>) => void;
        /**
          * Whether to show setup screen or not
         */
        "showSetupScreen"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteMeetingTitle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteMenu {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Offset in px
         */
        "offset"?: number;
        /**
          * Placement of menu
         */
        "placement"?: Placement;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteMenuItem {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteMenuList {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteMessageListView {
        /**
          * Estimated height of an item
         */
        "estimateItemSize"?: number;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Function to load more messages. Messages returned from this will be preprended
         */
        "loadMore"?: (lastMessage: Message) => Promise<Message[]>;
        /**
          * Messages to render
         */
        "messages": Message[];
        /**
          * Render function of the message
         */
        "renderer": (message: Message, index: number) => HTMLElement;
        /**
          * Maximum visible messages
         */
        "visibleItemsCount"?: number;
    }
    interface DyteMessageView {
        /**
          * List of actions to show in menu
         */
        "actions"?: MessageAction[];
        /**
          * Author display label
         */
        "authorName"?: string;
        /**
          * Avatar image url
         */
        "avatarUrl"?: string;
        /**
          * Hides author display label
         */
        "hideAuthorName"?: boolean;
        /**
          * Hides avatar
         */
        "hideAvatar"?: boolean;
        /**
          * Hides metadata (time)
         */
        "hideMetadata"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * action event
         */
        "onAction"?: (event: DyteMessageViewCustomEvent<string>) => void;
        /**
          * Time when message was sent
         */
        "time"?: Date;
        /**
          * Appearance
         */
        "variant"?: 'plain' | 'bubble';
        /**
          * Render
         */
        "viewType"?: 'incoming' | 'outgoing';
    }
    interface DyteMicToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteMicToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteMicrophoneSelector {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * variant
         */
        "variant"?: 'full' | 'inline';
    }
    interface DyteMixedGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio"?: string;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap"?: number;
        /**
          * Grid size
         */
        "gridSize"?: GridSize1;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Grid Layout
         */
        "layout"?: GridLayout1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Participants
         */
        "participants"?: Peer[];
        /**
          * Pinned Participants
         */
        "pinnedParticipants"?: Peer[];
        /**
          * Active Plugins
         */
        "plugins"?: DytePlugin[];
        /**
          * Screenshare Participants
         */
        "screenShareParticipants"?: Peer[];
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteMoreToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteMoreToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteMuteAllButton {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteMuteAllButtonCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteMuteAllConfirmation {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteMuteAllConfirmationCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteNameTag {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether it is used in a screen share view
         */
        "isScreenShare"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Name tag variant
         */
        "variant"?: DyteNameTagVariant;
    }
    interface DyteNetworkIndicator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Is for screenshare
         */
        "isScreenShare"?: boolean;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Participant or Self
         */
        "participant"?: Peer;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteNotification {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Message
         */
        "notification": Notification;
        /**
          * Dismiss event
         */
        "onDyteNotificationDismiss"?: (event: DyteNotificationCustomEvent<string>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteNotifications {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteOverlayModal {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteOverlayModalCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DytePaginatedList {
        /**
          * auto scroll list to bottom
         */
        "autoScroll"?: boolean;
        /**
          * Create nodes
         */
        "createNodes"?: (data: unknown[]) => VNode[];
        /**
          * label to show when empty
         */
        "emptyListLabel"?: string;
        /**
          * Fetch the data
         */
        "fetchData"?: (timestamp: number, size: number, reversed: boolean) => Promise<unknown[]>;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Page Size
         */
        "pageSize"?: number;
        /**
          * Number of pages allowed to be shown
         */
        "pagesAllowed"?: number;
        /**
          * Item id
         */
        "selectedItemId"?: string;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteParticipant {
        /**
          * Config object
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit dyte notifications
         */
        "onDyteSendNotification"?: (event: DyteParticipantCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Participant object
         */
        "participant"?: Peer;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Show participant summary
         */
        "view"?: ParticipantViewMode;
    }
    interface DyteParticipantCount {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteParticipantSetup {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether tile is used for preview
         */
        "isPreview"?: boolean;
        /**
          * Position of name tag
         */
        "nameTagPosition"?: | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'gradient';
    }
    interface DyteParticipantTile {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether tile is used for preview
         */
        "isPreview"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Position of name tag
         */
        "nameTagPosition"?: | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Event triggered when tile is loaded
         */
        "onTileLoad"?: (event: DyteParticipantTileCustomEvent<{ participant: Peer; videoElement: HTMLVideoElement }>) => void;
        /**
          * Event triggered when tile is unloaded
         */
        "onTileUnload"?: (event: DyteParticipantTileCustomEvent<Peer>) => void;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'gradient';
    }
    interface DyteParticipants {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteParticipantsAudio {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Callback to execute when the dialog is closed
         */
        "onDialogClose"?: (event: DyteParticipantsAudioCustomEvent<void>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteParticipantsStageList {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Search
         */
        "search"?: string;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * View mode for participants list
         */
        "view"?: ParticipantsViewMode;
    }
    interface DyteParticipantsStageQueue {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * View mode for participants list
         */
        "view"?: ParticipantsViewMode;
    }
    interface DyteParticipantsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteParticipantsToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteParticipantsViewerList {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Search
         */
        "search"?: string;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * View mode for participants list
         */
        "view"?: ParticipantsViewMode;
    }
    interface DyteParticipantsWaitingList {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * View mode for participants list
         */
        "view"?: ParticipantsViewMode;
    }
    interface DytePermissionsMessage {
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DytePermissionsMessageCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DytePipToggle {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DytePipToggleCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DytePluginMain {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Plugin
         */
        "plugin": DytePlugin;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DytePlugins {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DytePluginsCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DytePluginsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DytePluginsToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DytePoll {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Event which is emitted when a poll is voted on
         */
        "onDyteVotePoll"?: (event: DytePollCustomEvent<{
    id: string;
    index: number;
  }>) => void;
        /**
          * Permissions Object
         */
        "permissions"?: DytePermissionsPreset;
        /**
          * Poll
         */
        "poll": Poll;
        /**
          * Self ID
         */
        "self"?: string;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DytePollForm {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Event which is emitted when a poll is created
         */
        "onDyteCreatePoll"?: (event: DytePollFormCustomEvent<PollObject>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DytePolls {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DytePollsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DytePollsToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteRecordingIndicator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteRecordingToggle {
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit api error events
         */
        "onDyteAPIError"?: (event: DyteRecordingToggleCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteScreenShareToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit api error events
         */
        "onDyteAPIError"?: (event: DyteScreenShareToggleCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteScreenShareToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteScreenshareView {
        /**
          * Hide full screen button
         */
        "hideFullScreenButton"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Position of name tag
         */
        "nameTagPosition"?: | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteScreenshareViewCustomEvent<States>) => void;
        /**
          * Emits when video playback happens successfully
         */
        "onScreensharePlay"?: (event: DyteScreenshareViewCustomEvent<{
    participant: Peer;
    screenshareParticipant: Peer;
  }>) => void;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'gradient';
    }
    interface DyteSettings {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteSettingsCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteSettingsAudio {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event updated state
         */
        "onDyteStateUpdate"?: (event: DyteSettingsAudioCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteSettingsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteSettingsToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteSettingsVideo {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state
         */
        "onDyteStateUpdate"?: (event: DyteSettingsVideoCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteSetupScreen {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteSetupScreenCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteSidebar {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Default section
         */
        "defaultSection"?: DyteSidebarSection;
        /**
          * Enabled sections in sidebar
         */
        "enabledSections"?: DyteSidebarTab[];
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteSidebarCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * View type
         */
        "view"?: DyteSidebarView;
    }
    interface DyteSidebarUi {
        /**
          * Default tab to open
         */
        "currentTab"?: string;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Tab change event
         */
        "onSidebarClose"?: (event: DyteSidebarUiCustomEvent<void>) => void;
        /**
          * Tab change event
         */
        "onTabChange"?: (event: DyteSidebarUiCustomEvent<string>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * Tabs
         */
        "tabs"?: DyteSidebarTab[];
        /**
          * View
         */
        "view"?: DyteSidebarView;
    }
    interface DyteSimpleGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio"?: string;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap"?: number;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Participants
         */
        "participants"?: Peer[];
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteSpeakerSelector {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * variant
         */
        "variant"?: 'full' | 'inline';
    }
    interface DyteSpinner {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteSpotlightGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio"?: string;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap"?: number;
        /**
          * Grid size
         */
        "gridSize"?: GridSize1;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Grid Layout
         */
        "layout"?: GridLayout1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Participants
         */
        "participants"?: Peer[];
        /**
          * Pinned Participants
         */
        "pinnedParticipants"?: Peer[];
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteSpotlightIndicator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteStage {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteStageCustomEvent<States>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteStageToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteStageToggleCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface DyteSwitch {
        /**
          * Whether the switch is enabled/checked
         */
        "checked"?: boolean;
        /**
          * Whether switch is readonly
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Event when switch value is changed
         */
        "onDyteChange"?: (event: DyteSwitchCustomEvent<boolean>) => void;
        /**
          * Whether switch is readonly
         */
        "readonly"?: boolean;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteTabBar {
        /**
          * Active tab
         */
        "activeTab"?: Tab;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Grid Layout
         */
        "layout"?: GridLayout1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Set active tab
         */
        "onTabChange"?: (event: DyteTabBarCustomEvent<Tab>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Tabs
         */
        "tabs"?: Tab[];
    }
    interface DyteTextComposerView {
        /**
          * Disable the text input (default = false)
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Keydown event handler function
         */
        "keyDownHandler"?: (e: KeyboardEvent) => void;
        /**
          * Max length for text input
         */
        "maxLength"?: number;
        /**
          * Event emitted when text changes
         */
        "onTextChange"?: (event: DyteTextComposerViewCustomEvent<string>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Boolean to indicate if rate limit is breached
         */
        "rateLimitBreached"?: boolean;
        /**
          * Language
         */
        "t"?: DyteI18n1;
        /**
          * Default value for text input
         */
        "value"?: string;
    }
    interface DyteTextField {
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onDyteStateUpdate"?: (event: DyteTextFieldCustomEvent<States>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Input type
         */
        "type"?: string;
    }
    interface DyteTextMessage {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued"?: boolean;
        /**
          * Text message object
         */
        "message": TextMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now"?: Date;
        /**
          * show message in bubble
         */
        "showBubble"?: boolean;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteTextMessageView {
        /**
          * Renders text as markdown (default = true)
         */
        "isMarkdown"?: boolean;
        /**
          * Text message
         */
        "text": string;
    }
    interface DyteTooltip {
        /**
          * Delay before showing the tooltip
         */
        "delay"?: number;
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Tooltip kind
         */
        "kind"?: TooltipKind;
        /**
          * Tooltip label
         */
        "label"?: string;
        /**
          * Event handler called when the open state of the tooltip changes.
         */
        "onDyteOpenChange"?: (event: DyteTooltipCustomEvent<boolean>) => void;
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Placement of menu
         */
        "placement"?: Placement;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Tooltip variant
         */
        "variant"?: TooltipVariant;
    }
    interface DyteTranscript {
        /**
          * Dismiss event
         */
        "onDyteTranscriptDismiss"?: (event: DyteTranscriptCustomEvent<{
    id: string;
    renderedId: string;
  }>) => void;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Message
         */
        "transcript": Transcript & { renderedId?: string };
    }
    interface DyteTranscripts {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface DyteUiProvider {
        /**
          * Whether to apply the design system on the document root from config
         */
        "applyDesignSystem"?: boolean;
        /**
          * UI Config
         */
        "config"?: UIConfig1;
        /**
          * Icon Pack URL
         */
        "iconPackUrl"?: string;
        /**
          * Whether to join the meeting room
         */
        "joinRoom"?: boolean;
        /**
          * Whether to load config from preset
         */
        "loadConfigFromPreset"?: boolean;
        /**
          * dyte meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: DyteI18n1;
    }
    interface DyteViewerCount {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: DyteI18n;
        /**
          * Viewer count variant
         */
        "variant"?: ViewerCountVariant;
    }
    interface DyteWaitingScreen {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: DyteI18n;
    }
    interface IntrinsicElements {
        "dyte-ai": DyteAi;
        "dyte-ai-chat": DyteAiChat;
        "dyte-ai-home": DyteAiHome;
        "dyte-ai-toggle": DyteAiToggle;
        "dyte-ai-transcriptions": DyteAiTranscriptions;
        "dyte-audio-grid": DyteAudioGrid;
        "dyte-audio-tile": DyteAudioTile;
        "dyte-audio-visualizer": DyteAudioVisualizer;
        "dyte-avatar": DyteAvatar;
        "dyte-breakout-room-manager": DyteBreakoutRoomManager;
        "dyte-breakout-room-participants": DyteBreakoutRoomParticipants;
        "dyte-breakout-rooms-manager": DyteBreakoutRoomsManager;
        "dyte-breakout-rooms-toggle": DyteBreakoutRoomsToggle;
        "dyte-broadcast-message-modal": DyteBroadcastMessageModal;
        "dyte-button": DyteButton;
        "dyte-camera-selector": DyteCameraSelector;
        "dyte-camera-toggle": DyteCameraToggle;
        "dyte-caption-toggle": DyteCaptionToggle;
        "dyte-channel-creator": DyteChannelCreator;
        "dyte-channel-details": DyteChannelDetails;
        "dyte-channel-header": DyteChannelHeader;
        "dyte-channel-selector-ui": DyteChannelSelectorUi;
        "dyte-channel-selector-view": DyteChannelSelectorView;
        "dyte-chat": DyteChat;
        "dyte-chat-composer-ui": DyteChatComposerUi;
        "dyte-chat-composer-view": DyteChatComposerView;
        "dyte-chat-message": DyteChatMessage;
        "dyte-chat-messages-ui": DyteChatMessagesUi;
        "dyte-chat-messages-ui-paginated": DyteChatMessagesUiPaginated;
        "dyte-chat-search-results": DyteChatSearchResults;
        "dyte-chat-selector-ui": DyteChatSelectorUi;
        "dyte-chat-toggle": DyteChatToggle;
        "dyte-clock": DyteClock;
        "dyte-confirmation-modal": DyteConfirmationModal;
        "dyte-controlbar": DyteControlbar;
        "dyte-controlbar-button": DyteControlbarButton;
        "dyte-counter": DyteCounter;
        "dyte-dialog": DyteDialog;
        "dyte-dialog-manager": DyteDialogManager;
        "dyte-draft-attachment-view": DyteDraftAttachmentView;
        "dyte-emoji-picker": DyteEmojiPicker;
        "dyte-emoji-picker-button": DyteEmojiPickerButton;
        "dyte-ended-screen": DyteEndedScreen;
        "dyte-file-dropzone": DyteFileDropzone;
        "dyte-file-message": DyteFileMessage;
        "dyte-file-message-view": DyteFileMessageView;
        "dyte-file-picker-button": DyteFilePickerButton;
        "dyte-fullscreen-toggle": DyteFullscreenToggle;
        "dyte-grid": DyteGrid;
        "dyte-grid-pagination": DyteGridPagination;
        "dyte-header": DyteHeader;
        "dyte-icon": DyteIcon;
        "dyte-idle-screen": DyteIdleScreen;
        "dyte-image-message": DyteImageMessage;
        "dyte-image-message-view": DyteImageMessageView;
        "dyte-image-viewer": DyteImageViewer;
        "dyte-information-tooltip": DyteInformationTooltip;
        "dyte-join-stage": DyteJoinStage;
        "dyte-leave-button": DyteLeaveButton;
        "dyte-leave-meeting": DyteLeaveMeeting;
        "dyte-livestream-indicator": DyteLivestreamIndicator;
        "dyte-livestream-player": DyteLivestreamPlayer;
        "dyte-livestream-toggle": DyteLivestreamToggle;
        "dyte-logo": DyteLogo;
        "dyte-markdown-view": DyteMarkdownView;
        "dyte-meeting": DyteMeeting;
        "dyte-meeting-title": DyteMeetingTitle;
        "dyte-menu": DyteMenu;
        "dyte-menu-item": DyteMenuItem;
        "dyte-menu-list": DyteMenuList;
        "dyte-message-list-view": DyteMessageListView;
        "dyte-message-view": DyteMessageView;
        "dyte-mic-toggle": DyteMicToggle;
        "dyte-microphone-selector": DyteMicrophoneSelector;
        "dyte-mixed-grid": DyteMixedGrid;
        "dyte-more-toggle": DyteMoreToggle;
        "dyte-mute-all-button": DyteMuteAllButton;
        "dyte-mute-all-confirmation": DyteMuteAllConfirmation;
        "dyte-name-tag": DyteNameTag;
        "dyte-network-indicator": DyteNetworkIndicator;
        "dyte-notification": DyteNotification;
        "dyte-notifications": DyteNotifications;
        "dyte-overlay-modal": DyteOverlayModal;
        "dyte-paginated-list": DytePaginatedList;
        "dyte-participant": DyteParticipant;
        "dyte-participant-count": DyteParticipantCount;
        "dyte-participant-setup": DyteParticipantSetup;
        "dyte-participant-tile": DyteParticipantTile;
        "dyte-participants": DyteParticipants;
        "dyte-participants-audio": DyteParticipantsAudio;
        "dyte-participants-stage-list": DyteParticipantsStageList;
        "dyte-participants-stage-queue": DyteParticipantsStageQueue;
        "dyte-participants-toggle": DyteParticipantsToggle;
        "dyte-participants-viewer-list": DyteParticipantsViewerList;
        "dyte-participants-waiting-list": DyteParticipantsWaitingList;
        "dyte-permissions-message": DytePermissionsMessage;
        "dyte-pip-toggle": DytePipToggle;
        "dyte-plugin-main": DytePluginMain;
        "dyte-plugins": DytePlugins;
        "dyte-plugins-toggle": DytePluginsToggle;
        "dyte-poll": DytePoll;
        "dyte-poll-form": DytePollForm;
        "dyte-polls": DytePolls;
        "dyte-polls-toggle": DytePollsToggle;
        "dyte-recording-indicator": DyteRecordingIndicator;
        "dyte-recording-toggle": DyteRecordingToggle;
        "dyte-screen-share-toggle": DyteScreenShareToggle;
        "dyte-screenshare-view": DyteScreenshareView;
        "dyte-settings": DyteSettings;
        "dyte-settings-audio": DyteSettingsAudio;
        "dyte-settings-toggle": DyteSettingsToggle;
        "dyte-settings-video": DyteSettingsVideo;
        "dyte-setup-screen": DyteSetupScreen;
        "dyte-sidebar": DyteSidebar;
        "dyte-sidebar-ui": DyteSidebarUi;
        "dyte-simple-grid": DyteSimpleGrid;
        "dyte-speaker-selector": DyteSpeakerSelector;
        "dyte-spinner": DyteSpinner;
        "dyte-spotlight-grid": DyteSpotlightGrid;
        "dyte-spotlight-indicator": DyteSpotlightIndicator;
        "dyte-stage": DyteStage;
        "dyte-stage-toggle": DyteStageToggle;
        "dyte-switch": DyteSwitch;
        "dyte-tab-bar": DyteTabBar;
        "dyte-text-composer-view": DyteTextComposerView;
        "dyte-text-field": DyteTextField;
        "dyte-text-message": DyteTextMessage;
        "dyte-text-message-view": DyteTextMessageView;
        "dyte-tooltip": DyteTooltip;
        "dyte-transcript": DyteTranscript;
        "dyte-transcripts": DyteTranscripts;
        "dyte-ui-provider": DyteUiProvider;
        "dyte-viewer-count": DyteViewerCount;
        "dyte-waiting-screen": DyteWaitingScreen;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dyte-ai": LocalJSX.DyteAi & JSXBase.HTMLAttributes<HTMLDyteAiElement>;
            "dyte-ai-chat": LocalJSX.DyteAiChat & JSXBase.HTMLAttributes<HTMLDyteAiChatElement>;
            "dyte-ai-home": LocalJSX.DyteAiHome & JSXBase.HTMLAttributes<HTMLDyteAiHomeElement>;
            "dyte-ai-toggle": LocalJSX.DyteAiToggle & JSXBase.HTMLAttributes<HTMLDyteAiToggleElement>;
            "dyte-ai-transcriptions": LocalJSX.DyteAiTranscriptions & JSXBase.HTMLAttributes<HTMLDyteAiTranscriptionsElement>;
            "dyte-audio-grid": LocalJSX.DyteAudioGrid & JSXBase.HTMLAttributes<HTMLDyteAudioGridElement>;
            "dyte-audio-tile": LocalJSX.DyteAudioTile & JSXBase.HTMLAttributes<HTMLDyteAudioTileElement>;
            "dyte-audio-visualizer": LocalJSX.DyteAudioVisualizer & JSXBase.HTMLAttributes<HTMLDyteAudioVisualizerElement>;
            "dyte-avatar": LocalJSX.DyteAvatar & JSXBase.HTMLAttributes<HTMLDyteAvatarElement>;
            "dyte-breakout-room-manager": LocalJSX.DyteBreakoutRoomManager & JSXBase.HTMLAttributes<HTMLDyteBreakoutRoomManagerElement>;
            "dyte-breakout-room-participants": LocalJSX.DyteBreakoutRoomParticipants & JSXBase.HTMLAttributes<HTMLDyteBreakoutRoomParticipantsElement>;
            "dyte-breakout-rooms-manager": LocalJSX.DyteBreakoutRoomsManager & JSXBase.HTMLAttributes<HTMLDyteBreakoutRoomsManagerElement>;
            "dyte-breakout-rooms-toggle": LocalJSX.DyteBreakoutRoomsToggle & JSXBase.HTMLAttributes<HTMLDyteBreakoutRoomsToggleElement>;
            "dyte-broadcast-message-modal": LocalJSX.DyteBroadcastMessageModal & JSXBase.HTMLAttributes<HTMLDyteBroadcastMessageModalElement>;
            "dyte-button": LocalJSX.DyteButton & JSXBase.HTMLAttributes<HTMLDyteButtonElement>;
            "dyte-camera-selector": LocalJSX.DyteCameraSelector & JSXBase.HTMLAttributes<HTMLDyteCameraSelectorElement>;
            "dyte-camera-toggle": LocalJSX.DyteCameraToggle & JSXBase.HTMLAttributes<HTMLDyteCameraToggleElement>;
            "dyte-caption-toggle": LocalJSX.DyteCaptionToggle & JSXBase.HTMLAttributes<HTMLDyteCaptionToggleElement>;
            "dyte-channel-creator": LocalJSX.DyteChannelCreator & JSXBase.HTMLAttributes<HTMLDyteChannelCreatorElement>;
            "dyte-channel-details": LocalJSX.DyteChannelDetails & JSXBase.HTMLAttributes<HTMLDyteChannelDetailsElement>;
            "dyte-channel-header": LocalJSX.DyteChannelHeader & JSXBase.HTMLAttributes<HTMLDyteChannelHeaderElement>;
            "dyte-channel-selector-ui": LocalJSX.DyteChannelSelectorUi & JSXBase.HTMLAttributes<HTMLDyteChannelSelectorUiElement>;
            "dyte-channel-selector-view": LocalJSX.DyteChannelSelectorView & JSXBase.HTMLAttributes<HTMLDyteChannelSelectorViewElement>;
            "dyte-chat": LocalJSX.DyteChat & JSXBase.HTMLAttributes<HTMLDyteChatElement>;
            "dyte-chat-composer-ui": LocalJSX.DyteChatComposerUi & JSXBase.HTMLAttributes<HTMLDyteChatComposerUiElement>;
            "dyte-chat-composer-view": LocalJSX.DyteChatComposerView & JSXBase.HTMLAttributes<HTMLDyteChatComposerViewElement>;
            "dyte-chat-message": LocalJSX.DyteChatMessage & JSXBase.HTMLAttributes<HTMLDyteChatMessageElement>;
            "dyte-chat-messages-ui": LocalJSX.DyteChatMessagesUi & JSXBase.HTMLAttributes<HTMLDyteChatMessagesUiElement>;
            "dyte-chat-messages-ui-paginated": LocalJSX.DyteChatMessagesUiPaginated & JSXBase.HTMLAttributes<HTMLDyteChatMessagesUiPaginatedElement>;
            "dyte-chat-search-results": LocalJSX.DyteChatSearchResults & JSXBase.HTMLAttributes<HTMLDyteChatSearchResultsElement>;
            "dyte-chat-selector-ui": LocalJSX.DyteChatSelectorUi & JSXBase.HTMLAttributes<HTMLDyteChatSelectorUiElement>;
            "dyte-chat-toggle": LocalJSX.DyteChatToggle & JSXBase.HTMLAttributes<HTMLDyteChatToggleElement>;
            "dyte-clock": LocalJSX.DyteClock & JSXBase.HTMLAttributes<HTMLDyteClockElement>;
            "dyte-confirmation-modal": LocalJSX.DyteConfirmationModal & JSXBase.HTMLAttributes<HTMLDyteConfirmationModalElement>;
            "dyte-controlbar": LocalJSX.DyteControlbar & JSXBase.HTMLAttributes<HTMLDyteControlbarElement>;
            "dyte-controlbar-button": LocalJSX.DyteControlbarButton & JSXBase.HTMLAttributes<HTMLDyteControlbarButtonElement>;
            "dyte-counter": LocalJSX.DyteCounter & JSXBase.HTMLAttributes<HTMLDyteCounterElement>;
            "dyte-dialog": LocalJSX.DyteDialog & JSXBase.HTMLAttributes<HTMLDyteDialogElement>;
            "dyte-dialog-manager": LocalJSX.DyteDialogManager & JSXBase.HTMLAttributes<HTMLDyteDialogManagerElement>;
            "dyte-draft-attachment-view": LocalJSX.DyteDraftAttachmentView & JSXBase.HTMLAttributes<HTMLDyteDraftAttachmentViewElement>;
            "dyte-emoji-picker": LocalJSX.DyteEmojiPicker & JSXBase.HTMLAttributes<HTMLDyteEmojiPickerElement>;
            "dyte-emoji-picker-button": LocalJSX.DyteEmojiPickerButton & JSXBase.HTMLAttributes<HTMLDyteEmojiPickerButtonElement>;
            "dyte-ended-screen": LocalJSX.DyteEndedScreen & JSXBase.HTMLAttributes<HTMLDyteEndedScreenElement>;
            "dyte-file-dropzone": LocalJSX.DyteFileDropzone & JSXBase.HTMLAttributes<HTMLDyteFileDropzoneElement>;
            "dyte-file-message": LocalJSX.DyteFileMessage & JSXBase.HTMLAttributes<HTMLDyteFileMessageElement>;
            "dyte-file-message-view": LocalJSX.DyteFileMessageView & JSXBase.HTMLAttributes<HTMLDyteFileMessageViewElement>;
            "dyte-file-picker-button": LocalJSX.DyteFilePickerButton & JSXBase.HTMLAttributes<HTMLDyteFilePickerButtonElement>;
            "dyte-fullscreen-toggle": LocalJSX.DyteFullscreenToggle & JSXBase.HTMLAttributes<HTMLDyteFullscreenToggleElement>;
            "dyte-grid": LocalJSX.DyteGrid & JSXBase.HTMLAttributes<HTMLDyteGridElement>;
            "dyte-grid-pagination": LocalJSX.DyteGridPagination & JSXBase.HTMLAttributes<HTMLDyteGridPaginationElement>;
            "dyte-header": LocalJSX.DyteHeader & JSXBase.HTMLAttributes<HTMLDyteHeaderElement>;
            "dyte-icon": LocalJSX.DyteIcon & JSXBase.HTMLAttributes<HTMLDyteIconElement>;
            "dyte-idle-screen": LocalJSX.DyteIdleScreen & JSXBase.HTMLAttributes<HTMLDyteIdleScreenElement>;
            "dyte-image-message": LocalJSX.DyteImageMessage & JSXBase.HTMLAttributes<HTMLDyteImageMessageElement>;
            "dyte-image-message-view": LocalJSX.DyteImageMessageView & JSXBase.HTMLAttributes<HTMLDyteImageMessageViewElement>;
            "dyte-image-viewer": LocalJSX.DyteImageViewer & JSXBase.HTMLAttributes<HTMLDyteImageViewerElement>;
            "dyte-information-tooltip": LocalJSX.DyteInformationTooltip & JSXBase.HTMLAttributes<HTMLDyteInformationTooltipElement>;
            "dyte-join-stage": LocalJSX.DyteJoinStage & JSXBase.HTMLAttributes<HTMLDyteJoinStageElement>;
            "dyte-leave-button": LocalJSX.DyteLeaveButton & JSXBase.HTMLAttributes<HTMLDyteLeaveButtonElement>;
            "dyte-leave-meeting": LocalJSX.DyteLeaveMeeting & JSXBase.HTMLAttributes<HTMLDyteLeaveMeetingElement>;
            "dyte-livestream-indicator": LocalJSX.DyteLivestreamIndicator & JSXBase.HTMLAttributes<HTMLDyteLivestreamIndicatorElement>;
            "dyte-livestream-player": LocalJSX.DyteLivestreamPlayer & JSXBase.HTMLAttributes<HTMLDyteLivestreamPlayerElement>;
            "dyte-livestream-toggle": LocalJSX.DyteLivestreamToggle & JSXBase.HTMLAttributes<HTMLDyteLivestreamToggleElement>;
            "dyte-logo": LocalJSX.DyteLogo & JSXBase.HTMLAttributes<HTMLDyteLogoElement>;
            "dyte-markdown-view": LocalJSX.DyteMarkdownView & JSXBase.HTMLAttributes<HTMLDyteMarkdownViewElement>;
            "dyte-meeting": LocalJSX.DyteMeeting & JSXBase.HTMLAttributes<HTMLDyteMeetingElement>;
            "dyte-meeting-title": LocalJSX.DyteMeetingTitle & JSXBase.HTMLAttributes<HTMLDyteMeetingTitleElement>;
            "dyte-menu": LocalJSX.DyteMenu & JSXBase.HTMLAttributes<HTMLDyteMenuElement>;
            "dyte-menu-item": LocalJSX.DyteMenuItem & JSXBase.HTMLAttributes<HTMLDyteMenuItemElement>;
            "dyte-menu-list": LocalJSX.DyteMenuList & JSXBase.HTMLAttributes<HTMLDyteMenuListElement>;
            "dyte-message-list-view": LocalJSX.DyteMessageListView & JSXBase.HTMLAttributes<HTMLDyteMessageListViewElement>;
            "dyte-message-view": LocalJSX.DyteMessageView & JSXBase.HTMLAttributes<HTMLDyteMessageViewElement>;
            "dyte-mic-toggle": LocalJSX.DyteMicToggle & JSXBase.HTMLAttributes<HTMLDyteMicToggleElement>;
            "dyte-microphone-selector": LocalJSX.DyteMicrophoneSelector & JSXBase.HTMLAttributes<HTMLDyteMicrophoneSelectorElement>;
            "dyte-mixed-grid": LocalJSX.DyteMixedGrid & JSXBase.HTMLAttributes<HTMLDyteMixedGridElement>;
            "dyte-more-toggle": LocalJSX.DyteMoreToggle & JSXBase.HTMLAttributes<HTMLDyteMoreToggleElement>;
            "dyte-mute-all-button": LocalJSX.DyteMuteAllButton & JSXBase.HTMLAttributes<HTMLDyteMuteAllButtonElement>;
            "dyte-mute-all-confirmation": LocalJSX.DyteMuteAllConfirmation & JSXBase.HTMLAttributes<HTMLDyteMuteAllConfirmationElement>;
            "dyte-name-tag": LocalJSX.DyteNameTag & JSXBase.HTMLAttributes<HTMLDyteNameTagElement>;
            "dyte-network-indicator": LocalJSX.DyteNetworkIndicator & JSXBase.HTMLAttributes<HTMLDyteNetworkIndicatorElement>;
            "dyte-notification": LocalJSX.DyteNotification & JSXBase.HTMLAttributes<HTMLDyteNotificationElement>;
            "dyte-notifications": LocalJSX.DyteNotifications & JSXBase.HTMLAttributes<HTMLDyteNotificationsElement>;
            "dyte-overlay-modal": LocalJSX.DyteOverlayModal & JSXBase.HTMLAttributes<HTMLDyteOverlayModalElement>;
            "dyte-paginated-list": LocalJSX.DytePaginatedList & JSXBase.HTMLAttributes<HTMLDytePaginatedListElement>;
            "dyte-participant": LocalJSX.DyteParticipant & JSXBase.HTMLAttributes<HTMLDyteParticipantElement>;
            "dyte-participant-count": LocalJSX.DyteParticipantCount & JSXBase.HTMLAttributes<HTMLDyteParticipantCountElement>;
            "dyte-participant-setup": LocalJSX.DyteParticipantSetup & JSXBase.HTMLAttributes<HTMLDyteParticipantSetupElement>;
            "dyte-participant-tile": LocalJSX.DyteParticipantTile & JSXBase.HTMLAttributes<HTMLDyteParticipantTileElement>;
            "dyte-participants": LocalJSX.DyteParticipants & JSXBase.HTMLAttributes<HTMLDyteParticipantsElement>;
            "dyte-participants-audio": LocalJSX.DyteParticipantsAudio & JSXBase.HTMLAttributes<HTMLDyteParticipantsAudioElement>;
            "dyte-participants-stage-list": LocalJSX.DyteParticipantsStageList & JSXBase.HTMLAttributes<HTMLDyteParticipantsStageListElement>;
            "dyte-participants-stage-queue": LocalJSX.DyteParticipantsStageQueue & JSXBase.HTMLAttributes<HTMLDyteParticipantsStageQueueElement>;
            "dyte-participants-toggle": LocalJSX.DyteParticipantsToggle & JSXBase.HTMLAttributes<HTMLDyteParticipantsToggleElement>;
            "dyte-participants-viewer-list": LocalJSX.DyteParticipantsViewerList & JSXBase.HTMLAttributes<HTMLDyteParticipantsViewerListElement>;
            "dyte-participants-waiting-list": LocalJSX.DyteParticipantsWaitingList & JSXBase.HTMLAttributes<HTMLDyteParticipantsWaitingListElement>;
            "dyte-permissions-message": LocalJSX.DytePermissionsMessage & JSXBase.HTMLAttributes<HTMLDytePermissionsMessageElement>;
            "dyte-pip-toggle": LocalJSX.DytePipToggle & JSXBase.HTMLAttributes<HTMLDytePipToggleElement>;
            "dyte-plugin-main": LocalJSX.DytePluginMain & JSXBase.HTMLAttributes<HTMLDytePluginMainElement>;
            "dyte-plugins": LocalJSX.DytePlugins & JSXBase.HTMLAttributes<HTMLDytePluginsElement>;
            "dyte-plugins-toggle": LocalJSX.DytePluginsToggle & JSXBase.HTMLAttributes<HTMLDytePluginsToggleElement>;
            "dyte-poll": LocalJSX.DytePoll & JSXBase.HTMLAttributes<HTMLDytePollElement>;
            "dyte-poll-form": LocalJSX.DytePollForm & JSXBase.HTMLAttributes<HTMLDytePollFormElement>;
            "dyte-polls": LocalJSX.DytePolls & JSXBase.HTMLAttributes<HTMLDytePollsElement>;
            "dyte-polls-toggle": LocalJSX.DytePollsToggle & JSXBase.HTMLAttributes<HTMLDytePollsToggleElement>;
            "dyte-recording-indicator": LocalJSX.DyteRecordingIndicator & JSXBase.HTMLAttributes<HTMLDyteRecordingIndicatorElement>;
            "dyte-recording-toggle": LocalJSX.DyteRecordingToggle & JSXBase.HTMLAttributes<HTMLDyteRecordingToggleElement>;
            "dyte-screen-share-toggle": LocalJSX.DyteScreenShareToggle & JSXBase.HTMLAttributes<HTMLDyteScreenShareToggleElement>;
            "dyte-screenshare-view": LocalJSX.DyteScreenshareView & JSXBase.HTMLAttributes<HTMLDyteScreenshareViewElement>;
            "dyte-settings": LocalJSX.DyteSettings & JSXBase.HTMLAttributes<HTMLDyteSettingsElement>;
            "dyte-settings-audio": LocalJSX.DyteSettingsAudio & JSXBase.HTMLAttributes<HTMLDyteSettingsAudioElement>;
            "dyte-settings-toggle": LocalJSX.DyteSettingsToggle & JSXBase.HTMLAttributes<HTMLDyteSettingsToggleElement>;
            "dyte-settings-video": LocalJSX.DyteSettingsVideo & JSXBase.HTMLAttributes<HTMLDyteSettingsVideoElement>;
            "dyte-setup-screen": LocalJSX.DyteSetupScreen & JSXBase.HTMLAttributes<HTMLDyteSetupScreenElement>;
            "dyte-sidebar": LocalJSX.DyteSidebar & JSXBase.HTMLAttributes<HTMLDyteSidebarElement>;
            "dyte-sidebar-ui": LocalJSX.DyteSidebarUi & JSXBase.HTMLAttributes<HTMLDyteSidebarUiElement>;
            "dyte-simple-grid": LocalJSX.DyteSimpleGrid & JSXBase.HTMLAttributes<HTMLDyteSimpleGridElement>;
            "dyte-speaker-selector": LocalJSX.DyteSpeakerSelector & JSXBase.HTMLAttributes<HTMLDyteSpeakerSelectorElement>;
            "dyte-spinner": LocalJSX.DyteSpinner & JSXBase.HTMLAttributes<HTMLDyteSpinnerElement>;
            "dyte-spotlight-grid": LocalJSX.DyteSpotlightGrid & JSXBase.HTMLAttributes<HTMLDyteSpotlightGridElement>;
            "dyte-spotlight-indicator": LocalJSX.DyteSpotlightIndicator & JSXBase.HTMLAttributes<HTMLDyteSpotlightIndicatorElement>;
            "dyte-stage": LocalJSX.DyteStage & JSXBase.HTMLAttributes<HTMLDyteStageElement>;
            "dyte-stage-toggle": LocalJSX.DyteStageToggle & JSXBase.HTMLAttributes<HTMLDyteStageToggleElement>;
            "dyte-switch": LocalJSX.DyteSwitch & JSXBase.HTMLAttributes<HTMLDyteSwitchElement>;
            "dyte-tab-bar": LocalJSX.DyteTabBar & JSXBase.HTMLAttributes<HTMLDyteTabBarElement>;
            "dyte-text-composer-view": LocalJSX.DyteTextComposerView & JSXBase.HTMLAttributes<HTMLDyteTextComposerViewElement>;
            "dyte-text-field": LocalJSX.DyteTextField & JSXBase.HTMLAttributes<HTMLDyteTextFieldElement>;
            "dyte-text-message": LocalJSX.DyteTextMessage & JSXBase.HTMLAttributes<HTMLDyteTextMessageElement>;
            "dyte-text-message-view": LocalJSX.DyteTextMessageView & JSXBase.HTMLAttributes<HTMLDyteTextMessageViewElement>;
            "dyte-tooltip": LocalJSX.DyteTooltip & JSXBase.HTMLAttributes<HTMLDyteTooltipElement>;
            "dyte-transcript": LocalJSX.DyteTranscript & JSXBase.HTMLAttributes<HTMLDyteTranscriptElement>;
            "dyte-transcripts": LocalJSX.DyteTranscripts & JSXBase.HTMLAttributes<HTMLDyteTranscriptsElement>;
            "dyte-ui-provider": LocalJSX.DyteUiProvider & JSXBase.HTMLAttributes<HTMLDyteUiProviderElement>;
            "dyte-viewer-count": LocalJSX.DyteViewerCount & JSXBase.HTMLAttributes<HTMLDyteViewerCountElement>;
            "dyte-waiting-screen": LocalJSX.DyteWaitingScreen & JSXBase.HTMLAttributes<HTMLDyteWaitingScreenElement>;
        }
    }
}
